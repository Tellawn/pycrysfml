# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pycrysfml', [dirname(__file__)])
        except ImportError:
            import _pycrysfml
            return _pycrysfml
        if fp is not None:
            try:
                _mod = imp.load_module('_pycrysfml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pycrysfml = swig_import_helper()
    del swig_import_helper
else:
    import _pycrysfml
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycrysfml.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pycrysfml.SwigPyIterator_value(self)
    def incr(self, n=1): return _pycrysfml.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pycrysfml.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pycrysfml.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pycrysfml.SwigPyIterator_equal(self, *args)
    def copy(self): return _pycrysfml.SwigPyIterator_copy(self)
    def next(self): return _pycrysfml.SwigPyIterator_next(self)
    def __next__(self): return _pycrysfml.SwigPyIterator___next__(self)
    def previous(self): return _pycrysfml.SwigPyIterator_previous(self)
    def advance(self, *args): return _pycrysfml.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pycrysfml.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pycrysfml.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pycrysfml.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pycrysfml.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pycrysfml.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pycrysfml.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pycrysfml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pycrysfml.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pycrysfml.FloatVector___nonzero__(self)
    def __bool__(self): return _pycrysfml.FloatVector___bool__(self)
    def __len__(self): return _pycrysfml.FloatVector___len__(self)
    def pop(self): return _pycrysfml.FloatVector_pop(self)
    def __getslice__(self, *args): return _pycrysfml.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pycrysfml.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pycrysfml.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pycrysfml.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pycrysfml.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pycrysfml.FloatVector___setitem__(self, *args)
    def append(self, *args): return _pycrysfml.FloatVector_append(self, *args)
    def empty(self): return _pycrysfml.FloatVector_empty(self)
    def size(self): return _pycrysfml.FloatVector_size(self)
    def clear(self): return _pycrysfml.FloatVector_clear(self)
    def swap(self, *args): return _pycrysfml.FloatVector_swap(self, *args)
    def get_allocator(self): return _pycrysfml.FloatVector_get_allocator(self)
    def begin(self): return _pycrysfml.FloatVector_begin(self)
    def end(self): return _pycrysfml.FloatVector_end(self)
    def rbegin(self): return _pycrysfml.FloatVector_rbegin(self)
    def rend(self): return _pycrysfml.FloatVector_rend(self)
    def pop_back(self): return _pycrysfml.FloatVector_pop_back(self)
    def erase(self, *args): return _pycrysfml.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pycrysfml.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pycrysfml.FloatVector_push_back(self, *args)
    def front(self): return _pycrysfml.FloatVector_front(self)
    def back(self): return _pycrysfml.FloatVector_back(self)
    def assign(self, *args): return _pycrysfml.FloatVector_assign(self, *args)
    def resize(self, *args): return _pycrysfml.FloatVector_resize(self, *args)
    def insert(self, *args): return _pycrysfml.FloatVector_insert(self, *args)
    def reserve(self, *args): return _pycrysfml.FloatVector_reserve(self, *args)
    def capacity(self): return _pycrysfml.FloatVector_capacity(self)
    __swig_destroy__ = _pycrysfml.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _pycrysfml.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class angle_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, angle_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, angle_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_angle_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_angle_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.angle_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.angle_restraint_type_data_ptr_get, _pycrysfml.angle_restraint_type_data_ptr_set)
angle_restraint_type_swigregister = _pycrysfml.angle_restraint_type_swigregister
angle_restraint_type_swigregister(angle_restraint_type)

class anomalous_sc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, anomalous_sc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, anomalous_sc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_anomalous_sc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_anomalous_sc_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.anomalous_sc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.anomalous_sc_type_data_ptr_get, _pycrysfml.anomalous_sc_type_data_ptr_set)
anomalous_sc_type_swigregister = _pycrysfml.anomalous_sc_type_swigregister
anomalous_sc_type_swigregister(anomalous_sc_type)

class atom_equiv_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_equiv_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_equiv_list_type_data_ptr_get, _pycrysfml.atom_equiv_list_type_data_ptr_set)
atom_equiv_list_type_swigregister = _pycrysfml.atom_equiv_list_type_swigregister
atom_equiv_list_type_swigregister(atom_equiv_list_type)

class atom_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_equiv_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_equiv_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_equiv_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_equiv_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_equiv_type_data_ptr_get, _pycrysfml.atom_equiv_type_data_ptr_set)
atom_equiv_type_swigregister = _pycrysfml.atom_equiv_type_swigregister
atom_equiv_type_swigregister(atom_equiv_type)

class atom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_list_type
    __del__ = lambda self : None;
    def atom_list_to_cell(self, *args): return _pycrysfml.atom_list_type_atom_list_to_cell(self, *args)
    def copy_atom_list(self, *args): return _pycrysfml.atom_list_type_copy_atom_list(self, *args)
    def deallocate_atom_list(self): return _pycrysfml.atom_list_type_deallocate_atom_list(self)
    def read_bin_atom_list(self, *args): return _pycrysfml.atom_list_type_read_bin_atom_list(self, *args)
    def write_atom_list(self, level=None, lun=None, cell=None): return _pycrysfml.atom_list_type_write_atom_list(self, level, lun, cell)
    def write_atoms_cfl(self, lun=None, cell=None): return _pycrysfml.atom_list_type_write_atoms_cfl(self, lun, cell)
    def write_bin_atom_list(self, *args): return _pycrysfml.atom_list_type_write_bin_atom_list(self, *args)
    def init_calc_hkl_strfactors(self, mode=None, _lambda=None, lun=None): return _pycrysfml.atom_list_type_init_calc_hkl_strfactors(self, mode, _lambda, lun)
    def structure_factors(self, *args): return _pycrysfml.atom_list_type_structure_factors(self, *args)
    def init_refcodes(self, fmatom=None, mag_dom=None, molcrys=None, molec=None, model=None): return _pycrysfml.atom_list_type_init_refcodes(self, fmatom, mag_dom, molcrys, molec, model)
    def write_restraints_obscalc(self, iunit=None): return _pycrysfml.atom_list_type_write_restraints_obscalc(self, iunit)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_list_type_data_ptr_get, _pycrysfml.atom_list_type_data_ptr_set)
atom_list_type_swigregister = _pycrysfml.atom_list_type_swigregister
atom_list_type_swigregister(atom_list_type)

class atoms_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_cell_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atoms_cell_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_cell_type
    __del__ = lambda self : None;
    def atoms_cell_to_list(self, *args): return _pycrysfml.atoms_cell_type_atoms_cell_to_list(self, *args)
    def deallocate_atoms_cell(self): return _pycrysfml.atoms_cell_type_deallocate_atoms_cell(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_cell_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atoms_cell_type_data_ptr_get, _pycrysfml.atoms_cell_type_data_ptr_set)
atoms_cell_type_swigregister = _pycrysfml.atoms_cell_type_swigregister
atoms_cell_type_swigregister(atoms_cell_type)

class atoms_conf_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atoms_conf_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atoms_conf_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atoms_conf_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atoms_conf_list_type
    __del__ = lambda self : None;
    def calc_bvs(self, ipr=None, n_bvsm=None, filecod=None): return _pycrysfml.atoms_conf_list_type_calc_bvs(self, ipr, n_bvsm, filecod)
    def calc_map_bvs(self, *args): return _pycrysfml.atoms_conf_list_type_calc_map_bvs(self, *args)
    def cost_bvs(self, *args): return _pycrysfml.atoms_conf_list_type_cost_bvs(self, *args)
    def cost_bvs_coulombrep(self, *args): return _pycrysfml.atoms_conf_list_type_cost_bvs_coulombrep(self, *args)
    def deallocate_atoms_conf_list(self): return _pycrysfml.atoms_conf_list_type_deallocate_atoms_conf_list(self)
    def set_table_d0_b(self, n_bvsm=None): return _pycrysfml.atoms_conf_list_type_set_table_d0_b(self, n_bvsm)
    def species_on_list(self, mulg=None, tol=None): return _pycrysfml.atoms_conf_list_type_species_on_list(self, mulg, tol)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atoms_conf_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atoms_conf_list_type_data_ptr_get, _pycrysfml.atoms_conf_list_type_data_ptr_set)
atoms_conf_list_type_swigregister = _pycrysfml.atoms_conf_list_type_swigregister
atoms_conf_list_type_swigregister(atoms_conf_list_type)

class atom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, atom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, atom_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_atom_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_atom_type
    __del__ = lambda self : None;
    def init_atom_type(self): return _pycrysfml.atom_type_init_atom_type(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.atom_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.atom_type_data_ptr_get, _pycrysfml.atom_type_data_ptr_set)
atom_type_swigregister = _pycrysfml.atom_type_swigregister
atom_type_swigregister(atom_type)

class basic_numc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numc_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numc_type_data_ptr_get, _pycrysfml.basic_numc_type_data_ptr_set)
basic_numc_type_swigregister = _pycrysfml.basic_numc_type_swigregister
basic_numc_type_swigregister(basic_numc_type)

class basic_numi_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numi_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numi_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numi_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numi_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numi_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numi_type_data_ptr_get, _pycrysfml.basic_numi_type_data_ptr_set)
basic_numi_type_swigregister = _pycrysfml.basic_numi_type_swigregister
basic_numi_type_swigregister(basic_numi_type)

class basic_numr_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_numr_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_numr_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_basic_numr_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_basic_numr_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.basic_numr_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.basic_numr_type_data_ptr_get, _pycrysfml.basic_numr_type_data_ptr_set)
basic_numr_type_swigregister = _pycrysfml.basic_numr_type_swigregister
basic_numr_type_swigregister(basic_numr_type)

class bvs_par_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvs_par_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvs_par_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_bvs_par_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_bvs_par_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.bvs_par_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.bvs_par_type_data_ptr_get, _pycrysfml.bvs_par_type_data_ptr_set)
bvs_par_type_swigregister = _pycrysfml.bvs_par_type_swigregister
bvs_par_type_swigregister(bvs_par_type)

class calibration_detector_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, calibration_detector_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, calibration_detector_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_calibration_detector_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_calibration_detector_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.calibration_detector_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.calibration_detector_type_data_ptr_get, _pycrysfml.calibration_detector_type_data_ptr_set)
calibration_detector_type_swigregister = _pycrysfml.calibration_detector_type_swigregister
calibration_detector_type_swigregister(calibration_detector_type)

class chem_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chem_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chem_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_chem_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_chem_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.chem_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.chem_info_type_data_ptr_get, _pycrysfml.chem_info_type_data_ptr_set)
chem_info_type_swigregister = _pycrysfml.chem_info_type_swigregister
chem_info_type_swigregister(chem_info_type)

class coordination_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coordination_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coordination_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_coordination_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_coordination_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.coordination_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.coordination_type_data_ptr_get, _pycrysfml.coordination_type_data_ptr_set)
coordination_type_swigregister = _pycrysfml.coordination_type_swigregister
coordination_type_swigregister(coordination_type)

class crystal_cell_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, crystal_cell_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, crystal_cell_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_crystal_cell_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_crystal_cell_type
    __del__ = lambda self : None;
    def cell_volume_sigma(self): return _pycrysfml.crystal_cell_type_cell_volume_sigma(self)
    def u_equiv(self, *args): return _pycrysfml.crystal_cell_type_u_equiv(self, *args)
    def change_setting_cell(self, *args): return _pycrysfml.crystal_cell_type_change_setting_cell(self, *args)
    def get_cryst_family(self, *args): return _pycrysfml.crystal_cell_type_get_cryst_family(self, *args)
    def get_deriv_orth_cell(self, *args): return _pycrysfml.crystal_cell_type_get_deriv_orth_cell(self, *args)
    def get_transfm_matrix(self, *args): return _pycrysfml.crystal_cell_type_get_transfm_matrix(self, *args)
    def get_twofold_axes(self, *args): return _pycrysfml.crystal_cell_type_get_twofold_axes(self, *args)
    def read_bin_crystal_cell(self, *args): return _pycrysfml.crystal_cell_type_read_bin_crystal_cell(self, *args)
    def write_bin_crystal_cell(self, *args): return _pycrysfml.crystal_cell_type_write_bin_crystal_cell(self, *args)
    def write_crystal_cell(self, lun=None): return _pycrysfml.crystal_cell_type_write_crystal_cell(self, lun)
    def atom_uequi_list(self, *args): return _pycrysfml.crystal_cell_type_atom_uequi_list(self, *args)
    def unitcell_to_pdbfile(self, *args): return _pycrysfml.crystal_cell_type_unitcell_to_pdbfile(self, *args)
    def distance_and_sigma(self, *args): return _pycrysfml.crystal_cell_type_distance_and_sigma(self, *args)
    def genb(self, *args): return _pycrysfml.crystal_cell_type_genb(self, *args)
    def calc_magnetic_strf_miv(self, *args): return _pycrysfml.crystal_cell_type_calc_magnetic_strf_miv(self, *args)
    def calc_magnetic_strf_miv_dom(self, *args): return _pycrysfml.crystal_cell_type_calc_magnetic_strf_miv_dom(self, *args)
    def gen_satellites(self, *args): return _pycrysfml.crystal_cell_type_gen_satellites(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.crystal_cell_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.crystal_cell_type_data_ptr_get, _pycrysfml.crystal_cell_type_data_ptr_set)
crystal_cell_type_swigregister = _pycrysfml.crystal_cell_type_swigregister
crystal_cell_type_swigregister(crystal_cell_type)

class cube_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cube_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cube_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_cube_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_cube_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.cube_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.cube_info_type_data_ptr_get, _pycrysfml.cube_info_type_data_ptr_set)
cube_info_type_swigregister = _pycrysfml.cube_info_type_swigregister
cube_info_type_swigregister(cube_info_type)

class deriv_tof_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deriv_tof_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deriv_tof_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_deriv_tof_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_deriv_tof_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.deriv_tof_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.deriv_tof_type_data_ptr_get, _pycrysfml.deriv_tof_type_data_ptr_set)
deriv_tof_type_swigregister = _pycrysfml.deriv_tof_type_swigregister
deriv_tof_type_swigregister(deriv_tof_type)

class diffraction_pattern_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffraction_pattern_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffraction_pattern_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_diffraction_pattern_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffraction_pattern_type
    __del__ = lambda self : None;
    def calc_fwhm_peak(self, *args): return _pycrysfml.diffraction_pattern_type_calc_fwhm_peak(self, *args)
    def allocate_diffraction_pattern(self, npts=None): return _pycrysfml.diffraction_pattern_type_allocate_diffraction_pattern(self, npts)
    def calc_background(self, *args): return _pycrysfml.diffraction_pattern_type_calc_background(self, *args)
    def delete_noisy_points(self, *args): return _pycrysfml.diffraction_pattern_type_delete_noisy_points(self, *args)
    def purge_diffraction_pattern(self, *args): return _pycrysfml.diffraction_pattern_type_purge_diffraction_pattern(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffraction_pattern_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.diffraction_pattern_type_data_ptr_get, _pycrysfml.diffraction_pattern_type_data_ptr_set)
diffraction_pattern_type_swigregister = _pycrysfml.diffraction_pattern_type_swigregister
diffraction_pattern_type_swigregister(diffraction_pattern_type)

class diffractometer_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, diffractometer_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, diffractometer_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_diffractometer_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_diffractometer_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.diffractometer_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.diffractometer_type_data_ptr_get, _pycrysfml.diffractometer_type_data_ptr_set)
diffractometer_type_swigregister = _pycrysfml.diffractometer_type_swigregister
diffractometer_type_swigregister(diffractometer_type)

class distance_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, distance_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, distance_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_distance_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_distance_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.distance_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.distance_restraint_type_data_ptr_get, _pycrysfml.distance_restraint_type_data_ptr_set)
distance_restraint_type_swigregister = _pycrysfml.distance_restraint_type_swigregister
distance_restraint_type_swigregister(distance_restraint_type)

class err_text_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, err_text_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, err_text_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_err_text_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_err_text_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.err_text_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.err_text_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.err_text_type_data_ptr_get, _pycrysfml.err_text_type_data_ptr_set)
err_text_type_swigregister = _pycrysfml.err_text_type_swigregister
err_text_type_swigregister(err_text_type)

class file_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_file_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_file_list_type
    __del__ = lambda self : None;
    def allocate_restparam(self): return _pycrysfml.file_list_type_allocate_restparam(self)
    def read_refgcodes_file(self, *args): return _pycrysfml.file_list_type_read_refgcodes_file(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.file_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.file_list_type_data_ptr_get, _pycrysfml.file_list_type_data_ptr_set)
file_list_type_swigregister = _pycrysfml.file_list_type_swigregister
file_list_type_swigregister(file_list_type)

class FortFuncs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FortFuncs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FortFuncs, name)
    __repr__ = _swig_repr
    __swig_getmethods__["directory_exists"] = lambda x: _pycrysfml.FortFuncs_directory_exists
    if _newclass:directory_exists = staticmethod(_pycrysfml.FortFuncs_directory_exists)
    __swig_getmethods__["write_date_time"] = lambda x: _pycrysfml.FortFuncs_write_date_time
    if _newclass:write_date_time = staticmethod(_pycrysfml.FortFuncs_write_date_time)
    __swig_getmethods__["bessj"] = lambda x: _pycrysfml.FortFuncs_bessj
    if _newclass:bessj = staticmethod(_pycrysfml.FortFuncs_bessj)
    __swig_getmethods__["pgcd"] = lambda x: _pycrysfml.FortFuncs_pgcd
    if _newclass:pgcd = staticmethod(_pycrysfml.FortFuncs_pgcd)
    __swig_getmethods__["ppcm"] = lambda x: _pycrysfml.FortFuncs_ppcm
    if _newclass:ppcm = staticmethod(_pycrysfml.FortFuncs_ppcm)
    __swig_getmethods__["init_err_mathgen"] = lambda x: _pycrysfml.FortFuncs_init_err_mathgen
    if _newclass:init_err_mathgen = staticmethod(_pycrysfml.FortFuncs_init_err_mathgen)
    __swig_getmethods__["set_epsg"] = lambda x: _pycrysfml.FortFuncs_set_epsg
    if _newclass:set_epsg = staticmethod(_pycrysfml.FortFuncs_set_epsg)
    __swig_getmethods__["set_epsg_default"] = lambda x: _pycrysfml.FortFuncs_set_epsg_default
    if _newclass:set_epsg_default = staticmethod(_pycrysfml.FortFuncs_set_epsg_default)
    __swig_getmethods__["init_err_spher"] = lambda x: _pycrysfml.FortFuncs_init_err_spher
    if _newclass:init_err_spher = staticmethod(_pycrysfml.FortFuncs_init_err_spher)
    __swig_getmethods__["pikout_lj_cubic"] = lambda x: _pycrysfml.FortFuncs_pikout_lj_cubic
    if _newclass:pikout_lj_cubic = staticmethod(_pycrysfml.FortFuncs_pikout_lj_cubic)
    __swig_getmethods__["init_err_random"] = lambda x: _pycrysfml.FortFuncs_init_err_random
    if _newclass:init_err_random = staticmethod(_pycrysfml.FortFuncs_init_err_random)
    __swig_getmethods__["random_beta"] = lambda x: _pycrysfml.FortFuncs_random_beta
    if _newclass:random_beta = staticmethod(_pycrysfml.FortFuncs_random_beta)
    __swig_getmethods__["random_binomial1"] = lambda x: _pycrysfml.FortFuncs_random_binomial1
    if _newclass:random_binomial1 = staticmethod(_pycrysfml.FortFuncs_random_binomial1)
    __swig_getmethods__["random_binomial2"] = lambda x: _pycrysfml.FortFuncs_random_binomial2
    if _newclass:random_binomial2 = staticmethod(_pycrysfml.FortFuncs_random_binomial2)
    __swig_getmethods__["random_cauchy"] = lambda x: _pycrysfml.FortFuncs_random_cauchy
    if _newclass:random_cauchy = staticmethod(_pycrysfml.FortFuncs_random_cauchy)
    __swig_getmethods__["random_chisq"] = lambda x: _pycrysfml.FortFuncs_random_chisq
    if _newclass:random_chisq = staticmethod(_pycrysfml.FortFuncs_random_chisq)
    __swig_getmethods__["random_exponential"] = lambda x: _pycrysfml.FortFuncs_random_exponential
    if _newclass:random_exponential = staticmethod(_pycrysfml.FortFuncs_random_exponential)
    __swig_getmethods__["random_gamma"] = lambda x: _pycrysfml.FortFuncs_random_gamma
    if _newclass:random_gamma = staticmethod(_pycrysfml.FortFuncs_random_gamma)
    __swig_getmethods__["random_gamma1"] = lambda x: _pycrysfml.FortFuncs_random_gamma1
    if _newclass:random_gamma1 = staticmethod(_pycrysfml.FortFuncs_random_gamma1)
    __swig_getmethods__["random_gamma2"] = lambda x: _pycrysfml.FortFuncs_random_gamma2
    if _newclass:random_gamma2 = staticmethod(_pycrysfml.FortFuncs_random_gamma2)
    __swig_getmethods__["random_inv_gauss"] = lambda x: _pycrysfml.FortFuncs_random_inv_gauss
    if _newclass:random_inv_gauss = staticmethod(_pycrysfml.FortFuncs_random_inv_gauss)
    __swig_getmethods__["random_mvnorm"] = lambda x: _pycrysfml.FortFuncs_random_mvnorm
    if _newclass:random_mvnorm = staticmethod(_pycrysfml.FortFuncs_random_mvnorm)
    __swig_getmethods__["random_neg_binomial"] = lambda x: _pycrysfml.FortFuncs_random_neg_binomial
    if _newclass:random_neg_binomial = staticmethod(_pycrysfml.FortFuncs_random_neg_binomial)
    __swig_getmethods__["random_normal"] = lambda x: _pycrysfml.FortFuncs_random_normal
    if _newclass:random_normal = staticmethod(_pycrysfml.FortFuncs_random_normal)
    __swig_getmethods__["random_order"] = lambda x: _pycrysfml.FortFuncs_random_order
    if _newclass:random_order = staticmethod(_pycrysfml.FortFuncs_random_order)
    __swig_getmethods__["random_poisson"] = lambda x: _pycrysfml.FortFuncs_random_poisson
    if _newclass:random_poisson = staticmethod(_pycrysfml.FortFuncs_random_poisson)
    __swig_getmethods__["random_t"] = lambda x: _pycrysfml.FortFuncs_random_t
    if _newclass:random_t = staticmethod(_pycrysfml.FortFuncs_random_t)
    __swig_getmethods__["random_von_mises"] = lambda x: _pycrysfml.FortFuncs_random_von_mises
    if _newclass:random_von_mises = staticmethod(_pycrysfml.FortFuncs_random_von_mises)
    __swig_getmethods__["random_weibull"] = lambda x: _pycrysfml.FortFuncs_random_weibull
    if _newclass:random_weibull = staticmethod(_pycrysfml.FortFuncs_random_weibull)
    __swig_getmethods__["seed_random_number"] = lambda x: _pycrysfml.FortFuncs_seed_random_number
    if _newclass:seed_random_number = staticmethod(_pycrysfml.FortFuncs_seed_random_number)
    __swig_getmethods__["string_count"] = lambda x: _pycrysfml.FortFuncs_string_count
    if _newclass:string_count = staticmethod(_pycrysfml.FortFuncs_string_count)
    __swig_getmethods__["frac_trans_1dig"] = lambda x: _pycrysfml.FortFuncs_frac_trans_1dig
    if _newclass:frac_trans_1dig = staticmethod(_pycrysfml.FortFuncs_frac_trans_1dig)
    __swig_getmethods__["frac_trans_2dig"] = lambda x: _pycrysfml.FortFuncs_frac_trans_2dig
    if _newclass:frac_trans_2dig = staticmethod(_pycrysfml.FortFuncs_frac_trans_2dig)
    __swig_getmethods__["get_basename"] = lambda x: _pycrysfml.FortFuncs_get_basename
    if _newclass:get_basename = staticmethod(_pycrysfml.FortFuncs_get_basename)
    __swig_getmethods__["get_dirname"] = lambda x: _pycrysfml.FortFuncs_get_dirname
    if _newclass:get_dirname = staticmethod(_pycrysfml.FortFuncs_get_dirname)
    __swig_getmethods__["get_extension"] = lambda x: _pycrysfml.FortFuncs_get_extension
    if _newclass:get_extension = staticmethod(_pycrysfml.FortFuncs_get_extension)
    __swig_getmethods__["get_fraction_1dig"] = lambda x: _pycrysfml.FortFuncs_get_fraction_1dig
    if _newclass:get_fraction_1dig = staticmethod(_pycrysfml.FortFuncs_get_fraction_1dig)
    __swig_getmethods__["get_fraction_2dig"] = lambda x: _pycrysfml.FortFuncs_get_fraction_2dig
    if _newclass:get_fraction_2dig = staticmethod(_pycrysfml.FortFuncs_get_fraction_2dig)
    __swig_getmethods__["get_logunit"] = lambda x: _pycrysfml.FortFuncs_get_logunit
    if _newclass:get_logunit = staticmethod(_pycrysfml.FortFuncs_get_logunit)
    __swig_getmethods__["get_transf"] = lambda x: _pycrysfml.FortFuncs_get_transf
    if _newclass:get_transf = staticmethod(_pycrysfml.FortFuncs_get_transf)
    __swig_getmethods__["inc_linenum"] = lambda x: _pycrysfml.FortFuncs_inc_linenum
    if _newclass:inc_linenum = staticmethod(_pycrysfml.FortFuncs_inc_linenum)
    __swig_getmethods__["init_err_string"] = lambda x: _pycrysfml.FortFuncs_init_err_string
    if _newclass:init_err_string = staticmethod(_pycrysfml.FortFuncs_init_err_string)
    __swig_getmethods__["init_findfmt"] = lambda x: _pycrysfml.FortFuncs_init_findfmt
    if _newclass:init_findfmt = staticmethod(_pycrysfml.FortFuncs_init_findfmt)
    __swig_getmethods__["number_lines"] = lambda x: _pycrysfml.FortFuncs_number_lines
    if _newclass:number_lines = staticmethod(_pycrysfml.FortFuncs_number_lines)
    __swig_getmethods__["numcol_from_numfmt"] = lambda x: _pycrysfml.FortFuncs_numcol_from_numfmt
    if _newclass:numcol_from_numfmt = staticmethod(_pycrysfml.FortFuncs_numcol_from_numfmt)
    __swig_getmethods__["setnum_std"] = lambda x: _pycrysfml.FortFuncs_setnum_std
    if _newclass:setnum_std = staticmethod(_pycrysfml.FortFuncs_setnum_std)
    __swig_getmethods__["error_message"] = lambda x: _pycrysfml.FortFuncs_error_message
    if _newclass:error_message = staticmethod(_pycrysfml.FortFuncs_error_message)
    __swig_getmethods__["info_message"] = lambda x: _pycrysfml.FortFuncs_info_message
    if _newclass:info_message = staticmethod(_pycrysfml.FortFuncs_info_message)
    __swig_getmethods__["print_message"] = lambda x: _pycrysfml.FortFuncs_print_message
    if _newclass:print_message = staticmethod(_pycrysfml.FortFuncs_print_message)
    __swig_getmethods__["wait_message"] = lambda x: _pycrysfml.FortFuncs_wait_message
    if _newclass:wait_message = staticmethod(_pycrysfml.FortFuncs_wait_message)
    __swig_getmethods__["write_scroll_text"] = lambda x: _pycrysfml.FortFuncs_write_scroll_text
    if _newclass:write_scroll_text = staticmethod(_pycrysfml.FortFuncs_write_scroll_text)
    __swig_getmethods__["tof_carpenter"] = lambda x: _pycrysfml.FortFuncs_tof_carpenter
    if _newclass:tof_carpenter = staticmethod(_pycrysfml.FortFuncs_tof_carpenter)
    __swig_getmethods__["tof_jorgensen"] = lambda x: _pycrysfml.FortFuncs_tof_jorgensen
    if _newclass:tof_jorgensen = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen)
    __swig_getmethods__["tof_jorgensen_vondreele"] = lambda x: _pycrysfml.FortFuncs_tof_jorgensen_vondreele
    if _newclass:tof_jorgensen_vondreele = staticmethod(_pycrysfml.FortFuncs_tof_jorgensen_vondreele)
    __swig_getmethods__["init_prof_val"] = lambda x: _pycrysfml.FortFuncs_init_prof_val
    if _newclass:init_prof_val = staticmethod(_pycrysfml.FortFuncs_init_prof_val)
    __swig_getmethods__["prof_val"] = lambda x: _pycrysfml.FortFuncs_prof_val
    if _newclass:prof_val = staticmethod(_pycrysfml.FortFuncs_prof_val)
    __swig_getmethods__["veclength"] = lambda x: _pycrysfml.FortFuncs_veclength
    if _newclass:veclength = staticmethod(_pycrysfml.FortFuncs_veclength)
    __swig_getmethods__["init_err_math3d"] = lambda x: _pycrysfml.FortFuncs_init_err_math3d
    if _newclass:init_err_math3d = staticmethod(_pycrysfml.FortFuncs_init_err_math3d)
    __swig_getmethods__["set_eps"] = lambda x: _pycrysfml.FortFuncs_set_eps
    if _newclass:set_eps = staticmethod(_pycrysfml.FortFuncs_set_eps)
    __swig_getmethods__["set_eps_default"] = lambda x: _pycrysfml.FortFuncs_set_eps_default
    if _newclass:set_eps_default = staticmethod(_pycrysfml.FortFuncs_set_eps_default)
    __swig_getmethods__["get_plane_from_points"] = lambda x: _pycrysfml.FortFuncs_get_plane_from_points
    if _newclass:get_plane_from_points = staticmethod(_pycrysfml.FortFuncs_get_plane_from_points)
    __swig_getmethods__["matrix_diageigen"] = lambda x: _pycrysfml.FortFuncs_matrix_diageigen
    if _newclass:matrix_diageigen = staticmethod(_pycrysfml.FortFuncs_matrix_diageigen)
    __swig_getmethods__["matrix_inverse"] = lambda x: _pycrysfml.FortFuncs_matrix_inverse
    if _newclass:matrix_inverse = staticmethod(_pycrysfml.FortFuncs_matrix_inverse)
    __swig_getmethods__["resolv_sist_1x2"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_1x2
    if _newclass:resolv_sist_1x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x2)
    __swig_getmethods__["resolv_sist_1x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_1x3
    if _newclass:resolv_sist_1x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_1x3)
    __swig_getmethods__["resolv_sist_2x2"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_2x2
    if _newclass:resolv_sist_2x2 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x2)
    __swig_getmethods__["resolv_sist_2x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_2x3
    if _newclass:resolv_sist_2x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_2x3)
    __swig_getmethods__["resolv_sist_3x3"] = lambda x: _pycrysfml.FortFuncs_resolv_sist_3x3
    if _newclass:resolv_sist_3x3 = staticmethod(_pycrysfml.FortFuncs_resolv_sist_3x3)
    __swig_getmethods__["init_err_optim"] = lambda x: _pycrysfml.FortFuncs_init_err_optim
    if _newclass:init_err_optim = staticmethod(_pycrysfml.FortFuncs_init_err_optim)
    __swig_getmethods__["write_optimization_conditions"] = lambda x: _pycrysfml.FortFuncs_write_optimization_conditions
    if _newclass:write_optimization_conditions = staticmethod(_pycrysfml.FortFuncs_write_optimization_conditions)
    __swig_getmethods__["get_generators"] = lambda x: _pycrysfml.FortFuncs_get_generators
    if _newclass:get_generators = staticmethod(_pycrysfml.FortFuncs_get_generators)
    __swig_getmethods__["remove_spgr_info"] = lambda x: _pycrysfml.FortFuncs_remove_spgr_info
    if _newclass:remove_spgr_info = staticmethod(_pycrysfml.FortFuncs_remove_spgr_info)
    __swig_getmethods__["remove_system_equiv"] = lambda x: _pycrysfml.FortFuncs_remove_system_equiv
    if _newclass:remove_system_equiv = staticmethod(_pycrysfml.FortFuncs_remove_system_equiv)
    __swig_getmethods__["remove_wyckoff_info"] = lambda x: _pycrysfml.FortFuncs_remove_wyckoff_info
    if _newclass:remove_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_remove_wyckoff_info)
    __swig_getmethods__["set_spgr_info"] = lambda x: _pycrysfml.FortFuncs_set_spgr_info
    if _newclass:set_spgr_info = staticmethod(_pycrysfml.FortFuncs_set_spgr_info)
    __swig_getmethods__["set_system_equiv"] = lambda x: _pycrysfml.FortFuncs_set_system_equiv
    if _newclass:set_system_equiv = staticmethod(_pycrysfml.FortFuncs_set_system_equiv)
    __swig_getmethods__["set_wyckoff_info"] = lambda x: _pycrysfml.FortFuncs_set_wyckoff_info
    if _newclass:set_wyckoff_info = staticmethod(_pycrysfml.FortFuncs_set_wyckoff_info)
    __swig_getmethods__["get_atomic_mass"] = lambda x: _pycrysfml.FortFuncs_get_atomic_mass
    if _newclass:get_atomic_mass = staticmethod(_pycrysfml.FortFuncs_get_atomic_mass)
    __swig_getmethods__["get_atomic_vol"] = lambda x: _pycrysfml.FortFuncs_get_atomic_vol
    if _newclass:get_atomic_vol = staticmethod(_pycrysfml.FortFuncs_get_atomic_vol)
    __swig_getmethods__["get_chemsymb"] = lambda x: _pycrysfml.FortFuncs_get_chemsymb
    if _newclass:get_chemsymb = staticmethod(_pycrysfml.FortFuncs_get_chemsymb)
    __swig_getmethods__["get_covalent_radius"] = lambda x: _pycrysfml.FortFuncs_get_covalent_radius
    if _newclass:get_covalent_radius = staticmethod(_pycrysfml.FortFuncs_get_covalent_radius)
    __swig_getmethods__["get_fermi_length"] = lambda x: _pycrysfml.FortFuncs_get_fermi_length
    if _newclass:get_fermi_length = staticmethod(_pycrysfml.FortFuncs_get_fermi_length)
    __swig_getmethods__["get_inc_xs"] = lambda x: _pycrysfml.FortFuncs_get_inc_xs
    if _newclass:get_inc_xs = staticmethod(_pycrysfml.FortFuncs_get_inc_xs)
    __swig_getmethods__["get_abs_xs"] = lambda x: _pycrysfml.FortFuncs_get_abs_xs
    if _newclass:get_abs_xs = staticmethod(_pycrysfml.FortFuncs_get_abs_xs)
    __swig_getmethods__["get_ionic_radius"] = lambda x: _pycrysfml.FortFuncs_get_ionic_radius
    if _newclass:get_ionic_radius = staticmethod(_pycrysfml.FortFuncs_get_ionic_radius)
    __swig_getmethods__["remove_chem_info"] = lambda x: _pycrysfml.FortFuncs_remove_chem_info
    if _newclass:remove_chem_info = staticmethod(_pycrysfml.FortFuncs_remove_chem_info)
    __swig_getmethods__["remove_delta_fp_fpp"] = lambda x: _pycrysfml.FortFuncs_remove_delta_fp_fpp
    if _newclass:remove_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_remove_delta_fp_fpp)
    __swig_getmethods__["remove_magnetic_form"] = lambda x: _pycrysfml.FortFuncs_remove_magnetic_form
    if _newclass:remove_magnetic_form = staticmethod(_pycrysfml.FortFuncs_remove_magnetic_form)
    __swig_getmethods__["remove_xray_form"] = lambda x: _pycrysfml.FortFuncs_remove_xray_form
    if _newclass:remove_xray_form = staticmethod(_pycrysfml.FortFuncs_remove_xray_form)
    __swig_getmethods__["set_chem_info"] = lambda x: _pycrysfml.FortFuncs_set_chem_info
    if _newclass:set_chem_info = staticmethod(_pycrysfml.FortFuncs_set_chem_info)
    __swig_getmethods__["set_delta_fp_fpp"] = lambda x: _pycrysfml.FortFuncs_set_delta_fp_fpp
    if _newclass:set_delta_fp_fpp = staticmethod(_pycrysfml.FortFuncs_set_delta_fp_fpp)
    __swig_getmethods__["set_magnetic_form"] = lambda x: _pycrysfml.FortFuncs_set_magnetic_form
    if _newclass:set_magnetic_form = staticmethod(_pycrysfml.FortFuncs_set_magnetic_form)
    __swig_getmethods__["set_xray_form"] = lambda x: _pycrysfml.FortFuncs_set_xray_form
    if _newclass:set_xray_form = staticmethod(_pycrysfml.FortFuncs_set_xray_form)
    __swig_getmethods__["init_err_diffpatt"] = lambda x: _pycrysfml.FortFuncs_init_err_diffpatt
    if _newclass:init_err_diffpatt = staticmethod(_pycrysfml.FortFuncs_init_err_diffpatt)
    __swig_getmethods__["read_background_file"] = lambda x: _pycrysfml.FortFuncs_read_background_file
    if _newclass:read_background_file = staticmethod(_pycrysfml.FortFuncs_read_background_file)
    __swig_getmethods__["write_pattern_freeformat"] = lambda x: _pycrysfml.FortFuncs_write_pattern_freeformat
    if _newclass:write_pattern_freeformat = staticmethod(_pycrysfml.FortFuncs_write_pattern_freeformat)
    __swig_getmethods__["write_pattern_instrm5"] = lambda x: _pycrysfml.FortFuncs_write_pattern_instrm5
    if _newclass:write_pattern_instrm5 = staticmethod(_pycrysfml.FortFuncs_write_pattern_instrm5)
    __swig_getmethods__["write_pattern_xysig"] = lambda x: _pycrysfml.FortFuncs_write_pattern_xysig
    if _newclass:write_pattern_xysig = staticmethod(_pycrysfml.FortFuncs_write_pattern_xysig)
    __swig_getmethods__["init_err_bond"] = lambda x: _pycrysfml.FortFuncs_init_err_bond
    if _newclass:init_err_bond = staticmethod(_pycrysfml.FortFuncs_init_err_bond)
    __swig_getmethods__["remove_bonds_table"] = lambda x: _pycrysfml.FortFuncs_remove_bonds_table
    if _newclass:remove_bonds_table = staticmethod(_pycrysfml.FortFuncs_remove_bonds_table)
    __swig_getmethods__["set_bonds_table"] = lambda x: _pycrysfml.FortFuncs_set_bonds_table
    if _newclass:set_bonds_table = staticmethod(_pycrysfml.FortFuncs_set_bonds_table)
    __swig_getmethods__["get_basis_from_uvw"] = lambda x: _pycrysfml.FortFuncs_get_basis_from_uvw
    if _newclass:get_basis_from_uvw = staticmethod(_pycrysfml.FortFuncs_get_basis_from_uvw)
    __swig_getmethods__["get_primitive_cell"] = lambda x: _pycrysfml.FortFuncs_get_primitive_cell
    if _newclass:get_primitive_cell = staticmethod(_pycrysfml.FortFuncs_get_primitive_cell)
    __swig_getmethods__["init_err_crys"] = lambda x: _pycrysfml.FortFuncs_init_err_crys
    if _newclass:init_err_crys = staticmethod(_pycrysfml.FortFuncs_init_err_crys)
    __swig_getmethods__["set_crystal_cell"] = lambda x: _pycrysfml.FortFuncs_set_crystal_cell
    if _newclass:set_crystal_cell = staticmethod(_pycrysfml.FortFuncs_set_crystal_cell)
    __swig_getmethods__["volume_sigma_from_cell"] = lambda x: _pycrysfml.FortFuncs_volume_sigma_from_cell
    if _newclass:volume_sigma_from_cell = staticmethod(_pycrysfml.FortFuncs_volume_sigma_from_cell)
    __swig_getmethods__["axes_rotation"] = lambda x: _pycrysfml.FortFuncs_axes_rotation
    if _newclass:axes_rotation = staticmethod(_pycrysfml.FortFuncs_axes_rotation)
    __swig_getmethods__["get_laue_num"] = lambda x: _pycrysfml.FortFuncs_get_laue_num
    if _newclass:get_laue_num = staticmethod(_pycrysfml.FortFuncs_get_laue_num)
    __swig_getmethods__["get_multip_pos"] = lambda x: _pycrysfml.FortFuncs_get_multip_pos
    if _newclass:get_multip_pos = staticmethod(_pycrysfml.FortFuncs_get_multip_pos)
    __swig_getmethods__["get_occ_site"] = lambda x: _pycrysfml.FortFuncs_get_occ_site
    if _newclass:get_occ_site = staticmethod(_pycrysfml.FortFuncs_get_occ_site)
    __swig_getmethods__["get_pointgroup_num"] = lambda x: _pycrysfml.FortFuncs_get_pointgroup_num
    if _newclass:get_pointgroup_num = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_num)
    __swig_getmethods__["lattice_trans"] = lambda x: _pycrysfml.FortFuncs_lattice_trans
    if _newclass:lattice_trans = staticmethod(_pycrysfml.FortFuncs_lattice_trans)
    __swig_getmethods__["check_generator"] = lambda x: _pycrysfml.FortFuncs_check_generator
    if _newclass:check_generator = staticmethod(_pycrysfml.FortFuncs_check_generator)
    __swig_getmethods__["decodmatmag"] = lambda x: _pycrysfml.FortFuncs_decodmatmag
    if _newclass:decodmatmag = staticmethod(_pycrysfml.FortFuncs_decodmatmag)
    __swig_getmethods__["get_laue_str"] = lambda x: _pycrysfml.FortFuncs_get_laue_str
    if _newclass:get_laue_str = staticmethod(_pycrysfml.FortFuncs_get_laue_str)
    __swig_getmethods__["get_pointgroup_str"] = lambda x: _pycrysfml.FortFuncs_get_pointgroup_str
    if _newclass:get_pointgroup_str = staticmethod(_pycrysfml.FortFuncs_get_pointgroup_str)
    __swig_getmethods__["get_seitz_symbol"] = lambda x: _pycrysfml.FortFuncs_get_seitz_symbol
    if _newclass:get_seitz_symbol = staticmethod(_pycrysfml.FortFuncs_get_seitz_symbol)
    __swig_getmethods__["get_shubnikov_operator_symbol"] = lambda x: _pycrysfml.FortFuncs_get_shubnikov_operator_symbol
    if _newclass:get_shubnikov_operator_symbol = staticmethod(_pycrysfml.FortFuncs_get_shubnikov_operator_symbol)
    __swig_getmethods__["get_string_resolv"] = lambda x: _pycrysfml.FortFuncs_get_string_resolv
    if _newclass:get_string_resolv = staticmethod(_pycrysfml.FortFuncs_get_string_resolv)
    __swig_getmethods__["get_symel"] = lambda x: _pycrysfml.FortFuncs_get_symel
    if _newclass:get_symel = staticmethod(_pycrysfml.FortFuncs_get_symel)
    __swig_getmethods__["get_symkov"] = lambda x: _pycrysfml.FortFuncs_get_symkov
    if _newclass:get_symkov = staticmethod(_pycrysfml.FortFuncs_get_symkov)
    __swig_getmethods__["get_trasfm_symbol"] = lambda x: _pycrysfml.FortFuncs_get_trasfm_symbol
    if _newclass:get_trasfm_symbol = staticmethod(_pycrysfml.FortFuncs_get_trasfm_symbol)
    __swig_getmethods__["get_transl_symbol"] = lambda x: _pycrysfml.FortFuncs_get_transl_symbol
    if _newclass:get_transl_symbol = staticmethod(_pycrysfml.FortFuncs_get_transl_symbol)
    __swig_getmethods__["init_err_symm"] = lambda x: _pycrysfml.FortFuncs_init_err_symm
    if _newclass:init_err_symm = staticmethod(_pycrysfml.FortFuncs_init_err_symm)
    __swig_getmethods__["inverse_symm"] = lambda x: _pycrysfml.FortFuncs_inverse_symm
    if _newclass:inverse_symm = staticmethod(_pycrysfml.FortFuncs_inverse_symm)
    __swig_getmethods__["latsym"] = lambda x: _pycrysfml.FortFuncs_latsym
    if _newclass:latsym = staticmethod(_pycrysfml.FortFuncs_latsym)
    __swig_getmethods__["read_msymm"] = lambda x: _pycrysfml.FortFuncs_read_msymm
    if _newclass:read_msymm = staticmethod(_pycrysfml.FortFuncs_read_msymm)
    __swig_getmethods__["read_symtrans_code"] = lambda x: _pycrysfml.FortFuncs_read_symtrans_code
    if _newclass:read_symtrans_code = staticmethod(_pycrysfml.FortFuncs_read_symtrans_code)
    __swig_getmethods__["read_xsym"] = lambda x: _pycrysfml.FortFuncs_read_xsym
    if _newclass:read_xsym = staticmethod(_pycrysfml.FortFuncs_read_xsym)
    __swig_getmethods__["searchop"] = lambda x: _pycrysfml.FortFuncs_searchop
    if _newclass:searchop = staticmethod(_pycrysfml.FortFuncs_searchop)
    __swig_getmethods__["set_spacegroup"] = lambda x: _pycrysfml.FortFuncs_set_spacegroup
    if _newclass:set_spacegroup = staticmethod(_pycrysfml.FortFuncs_set_spacegroup)
    __swig_getmethods__["similar_transf_sg"] = lambda x: _pycrysfml.FortFuncs_similar_transf_sg
    if _newclass:similar_transf_sg = staticmethod(_pycrysfml.FortFuncs_similar_transf_sg)
    __swig_getmethods__["sym_prod_st"] = lambda x: _pycrysfml.FortFuncs_sym_prod_st
    if _newclass:sym_prod_st = staticmethod(_pycrysfml.FortFuncs_sym_prod_st)
    __swig_getmethods__["write_sym"] = lambda x: _pycrysfml.FortFuncs_write_sym
    if _newclass:write_sym = staticmethod(_pycrysfml.FortFuncs_write_sym)
    __swig_getmethods__["write_symtrans_code"] = lambda x: _pycrysfml.FortFuncs_write_symtrans_code
    if _newclass:write_symtrans_code = staticmethod(_pycrysfml.FortFuncs_write_symtrans_code)
    __swig_getmethods__["define_uncompress_program"] = lambda x: _pycrysfml.FortFuncs_define_uncompress_program
    if _newclass:define_uncompress_program = staticmethod(_pycrysfml.FortFuncs_define_uncompress_program)
    __swig_getmethods__["get_absolute_data_path"] = lambda x: _pycrysfml.FortFuncs_get_absolute_data_path
    if _newclass:get_absolute_data_path = staticmethod(_pycrysfml.FortFuncs_get_absolute_data_path)
    __swig_getmethods__["get_next_yearcycle"] = lambda x: _pycrysfml.FortFuncs_get_next_yearcycle
    if _newclass:get_next_yearcycle = staticmethod(_pycrysfml.FortFuncs_get_next_yearcycle)
    __swig_getmethods__["init_err_illdata"] = lambda x: _pycrysfml.FortFuncs_init_err_illdata
    if _newclass:init_err_illdata = staticmethod(_pycrysfml.FortFuncs_init_err_illdata)
    __swig_getmethods__["initialize_data_directory"] = lambda x: _pycrysfml.FortFuncs_initialize_data_directory
    if _newclass:initialize_data_directory = staticmethod(_pycrysfml.FortFuncs_initialize_data_directory)
    __swig_getmethods__["read_current_instrm"] = lambda x: _pycrysfml.FortFuncs_read_current_instrm
    if _newclass:read_current_instrm = staticmethod(_pycrysfml.FortFuncs_read_current_instrm)
    __swig_getmethods__["set_current_orient"] = lambda x: _pycrysfml.FortFuncs_set_current_orient
    if _newclass:set_current_orient = staticmethod(_pycrysfml.FortFuncs_set_current_orient)
    __swig_getmethods__["set_default_instrument"] = lambda x: _pycrysfml.FortFuncs_set_default_instrument
    if _newclass:set_default_instrument = staticmethod(_pycrysfml.FortFuncs_set_default_instrument)
    __swig_getmethods__["set_ill_data_directory"] = lambda x: _pycrysfml.FortFuncs_set_ill_data_directory
    if _newclass:set_ill_data_directory = staticmethod(_pycrysfml.FortFuncs_set_ill_data_directory)
    __swig_getmethods__["set_instrm_directory"] = lambda x: _pycrysfml.FortFuncs_set_instrm_directory
    if _newclass:set_instrm_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_directory)
    __swig_getmethods__["set_instrm_geometry_directory"] = lambda x: _pycrysfml.FortFuncs_set_instrm_geometry_directory
    if _newclass:set_instrm_geometry_directory = staticmethod(_pycrysfml.FortFuncs_set_instrm_geometry_directory)
    __swig_getmethods__["update_current_instrm_ub"] = lambda x: _pycrysfml.FortFuncs_update_current_instrm_ub
    if _newclass:update_current_instrm_ub = staticmethod(_pycrysfml.FortFuncs_update_current_instrm_ub)
    __swig_getmethods__["write_current_instrm_data"] = lambda x: _pycrysfml.FortFuncs_write_current_instrm_data
    if _newclass:write_current_instrm_data = staticmethod(_pycrysfml.FortFuncs_write_current_instrm_data)
    __swig_getmethods__["read_calibration_file"] = lambda x: _pycrysfml.FortFuncs_read_calibration_file
    if _newclass:read_calibration_file = staticmethod(_pycrysfml.FortFuncs_read_calibration_file)
    __swig_getmethods__["get_maxnumref"] = lambda x: _pycrysfml.FortFuncs_get_maxnumref
    if _newclass:get_maxnumref = staticmethod(_pycrysfml.FortFuncs_get_maxnumref)
    __swig_getmethods__["init_err_refl"] = lambda x: _pycrysfml.FortFuncs_init_err_refl
    if _newclass:init_err_refl = staticmethod(_pycrysfml.FortFuncs_init_err_refl)
    __swig_getmethods__["equiv_atm"] = lambda x: _pycrysfml.FortFuncs_equiv_atm
    if _newclass:equiv_atm = staticmethod(_pycrysfml.FortFuncs_equiv_atm)
    __swig_getmethods__["allocate_atoms_cell"] = lambda x: _pycrysfml.FortFuncs_allocate_atoms_cell
    if _newclass:allocate_atoms_cell = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_cell)
    __swig_getmethods__["allocate_atom_list"] = lambda x: _pycrysfml.FortFuncs_allocate_atom_list
    if _newclass:allocate_atom_list = staticmethod(_pycrysfml.FortFuncs_allocate_atom_list)
    __swig_getmethods__["allocate_matom_list"] = lambda x: _pycrysfml.FortFuncs_allocate_matom_list
    if _newclass:allocate_matom_list = staticmethod(_pycrysfml.FortFuncs_allocate_matom_list)
    __swig_getmethods__["init_err_atmd"] = lambda x: _pycrysfml.FortFuncs_init_err_atmd
    if _newclass:init_err_atmd = staticmethod(_pycrysfml.FortFuncs_init_err_atmd)
    __swig_getmethods__["multi"] = lambda x: _pycrysfml.FortFuncs_multi
    if _newclass:multi = staticmethod(_pycrysfml.FortFuncs_multi)
    __swig_getmethods__["write_cfl"] = lambda x: _pycrysfml.FortFuncs_write_cfl
    if _newclass:write_cfl = staticmethod(_pycrysfml.FortFuncs_write_cfl)
    __swig_getmethods__["calc_strfactor"] = lambda x: _pycrysfml.FortFuncs_calc_strfactor
    if _newclass:calc_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_strfactor)
    __swig_getmethods__["calc_hkl_strfactor"] = lambda x: _pycrysfml.FortFuncs_calc_hkl_strfactor
    if _newclass:calc_hkl_strfactor = staticmethod(_pycrysfml.FortFuncs_calc_hkl_strfactor)
    __swig_getmethods__["write_structure_factors"] = lambda x: _pycrysfml.FortFuncs_write_structure_factors
    if _newclass:write_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_structure_factors)
    __swig_getmethods__["allocate_coordination_type"] = lambda x: _pycrysfml.FortFuncs_allocate_coordination_type
    if _newclass:allocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_allocate_coordination_type)
    __swig_getmethods__["allocate_point_list"] = lambda x: _pycrysfml.FortFuncs_allocate_point_list
    if _newclass:allocate_point_list = staticmethod(_pycrysfml.FortFuncs_allocate_point_list)
    __swig_getmethods__["calc_dist_angle"] = lambda x: _pycrysfml.FortFuncs_calc_dist_angle
    if _newclass:calc_dist_angle = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle)
    __swig_getmethods__["calc_dist_angle_sigma"] = lambda x: _pycrysfml.FortFuncs_calc_dist_angle_sigma
    if _newclass:calc_dist_angle_sigma = staticmethod(_pycrysfml.FortFuncs_calc_dist_angle_sigma)
    __swig_getmethods__["deallocate_coordination_type"] = lambda x: _pycrysfml.FortFuncs_deallocate_coordination_type
    if _newclass:deallocate_coordination_type = staticmethod(_pycrysfml.FortFuncs_deallocate_coordination_type)
    __swig_getmethods__["get_anglen_axis_from_rotmat"] = lambda x: _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat
    if _newclass:get_anglen_axis_from_rotmat = staticmethod(_pycrysfml.FortFuncs_get_anglen_axis_from_rotmat)
    __swig_getmethods__["get_euler_from_fract"] = lambda x: _pycrysfml.FortFuncs_get_euler_from_fract
    if _newclass:get_euler_from_fract = staticmethod(_pycrysfml.FortFuncs_get_euler_from_fract)
    __swig_getmethods__["get_matrix_moving_v_to_u"] = lambda x: _pycrysfml.FortFuncs_get_matrix_moving_v_to_u
    if _newclass:get_matrix_moving_v_to_u = staticmethod(_pycrysfml.FortFuncs_get_matrix_moving_v_to_u)
    __swig_getmethods__["get_omegachiphi"] = lambda x: _pycrysfml.FortFuncs_get_omegachiphi
    if _newclass:get_omegachiphi = staticmethod(_pycrysfml.FortFuncs_get_omegachiphi)
    __swig_getmethods__["get_phithechi"] = lambda x: _pycrysfml.FortFuncs_get_phithechi
    if _newclass:get_phithechi = staticmethod(_pycrysfml.FortFuncs_get_phithechi)
    __swig_getmethods__["get_transf_list"] = lambda x: _pycrysfml.FortFuncs_get_transf_list
    if _newclass:get_transf_list = staticmethod(_pycrysfml.FortFuncs_get_transf_list)
    __swig_getmethods__["init_err_geom"] = lambda x: _pycrysfml.FortFuncs_init_err_geom
    if _newclass:init_err_geom = staticmethod(_pycrysfml.FortFuncs_init_err_geom)
    __swig_getmethods__["p1_dist"] = lambda x: _pycrysfml.FortFuncs_p1_dist
    if _newclass:p1_dist = staticmethod(_pycrysfml.FortFuncs_p1_dist)
    __swig_getmethods__["print_distances"] = lambda x: _pycrysfml.FortFuncs_print_distances
    if _newclass:print_distances = staticmethod(_pycrysfml.FortFuncs_print_distances)
    __swig_getmethods__["set_rotation_matrix"] = lambda x: _pycrysfml.FortFuncs_set_rotation_matrix
    if _newclass:set_rotation_matrix = staticmethod(_pycrysfml.FortFuncs_set_rotation_matrix)
    __swig_getmethods__["set_tdist_coordination"] = lambda x: _pycrysfml.FortFuncs_set_tdist_coordination
    if _newclass:set_tdist_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_coordination)
    __swig_getmethods__["set_tdist_partial_coordination"] = lambda x: _pycrysfml.FortFuncs_set_tdist_partial_coordination
    if _newclass:set_tdist_partial_coordination = staticmethod(_pycrysfml.FortFuncs_set_tdist_partial_coordination)
    __swig_getmethods__["hk_equiv"] = lambda x: _pycrysfml.FortFuncs_hk_equiv
    if _newclass:hk_equiv = staticmethod(_pycrysfml.FortFuncs_hk_equiv)
    __swig_getmethods__["k_equiv"] = lambda x: _pycrysfml.FortFuncs_k_equiv
    if _newclass:k_equiv = staticmethod(_pycrysfml.FortFuncs_k_equiv)
    __swig_getmethods__["k_equiv_minus_k"] = lambda x: _pycrysfml.FortFuncs_k_equiv_minus_k
    if _newclass:k_equiv_minus_k = staticmethod(_pycrysfml.FortFuncs_k_equiv_minus_k)
    __swig_getmethods__["k_star"] = lambda x: _pycrysfml.FortFuncs_k_star
    if _newclass:k_star = staticmethod(_pycrysfml.FortFuncs_k_star)
    __swig_getmethods__["index_cube"] = lambda x: _pycrysfml.FortFuncs_index_cube
    if _newclass:index_cube = staticmethod(_pycrysfml.FortFuncs_index_cube)
    __swig_getmethods__["vpoint_in_cube"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_cube
    if _newclass:vpoint_in_cube = staticmethod(_pycrysfml.FortFuncs_vpoint_in_cube)
    __swig_getmethods__["vpoint_in_line"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_line
    if _newclass:vpoint_in_line = staticmethod(_pycrysfml.FortFuncs_vpoint_in_line)
    __swig_getmethods__["vpoint_in_square"] = lambda x: _pycrysfml.FortFuncs_vpoint_in_square
    if _newclass:vpoint_in_square = staticmethod(_pycrysfml.FortFuncs_vpoint_in_square)
    __swig_getmethods__["init_err_maps"] = lambda x: _pycrysfml.FortFuncs_init_err_maps
    if _newclass:init_err_maps = staticmethod(_pycrysfml.FortFuncs_init_err_maps)
    __swig_getmethods__["set_cube_info"] = lambda x: _pycrysfml.FortFuncs_set_cube_info
    if _newclass:set_cube_info = staticmethod(_pycrysfml.FortFuncs_set_cube_info)
    __swig_getmethods__["init_err_molec"] = lambda x: _pycrysfml.FortFuncs_init_err_molec
    if _newclass:init_err_molec = staticmethod(_pycrysfml.FortFuncs_init_err_molec)
    __swig_getmethods__["set_euler_matrix"] = lambda x: _pycrysfml.FortFuncs_set_euler_matrix
    if _newclass:set_euler_matrix = staticmethod(_pycrysfml.FortFuncs_set_euler_matrix)
    __swig_getmethods__["angs_4c_bisecting"] = lambda x: _pycrysfml.FortFuncs_angs_4c_bisecting
    if _newclass:angs_4c_bisecting = staticmethod(_pycrysfml.FortFuncs_angs_4c_bisecting)
    __swig_getmethods__["calang"] = lambda x: _pycrysfml.FortFuncs_calang
    if _newclass:calang = staticmethod(_pycrysfml.FortFuncs_calang)
    __swig_getmethods__["calc_om_chi_phi"] = lambda x: _pycrysfml.FortFuncs_calc_om_chi_phi
    if _newclass:calc_om_chi_phi = staticmethod(_pycrysfml.FortFuncs_calc_om_chi_phi)
    __swig_getmethods__["calc_psi"] = lambda x: _pycrysfml.FortFuncs_calc_psi
    if _newclass:calc_psi = staticmethod(_pycrysfml.FortFuncs_calc_psi)
    __swig_getmethods__["cell_fr_ub"] = lambda x: _pycrysfml.FortFuncs_cell_fr_ub
    if _newclass:cell_fr_ub = staticmethod(_pycrysfml.FortFuncs_cell_fr_ub)
    __swig_getmethods__["chi_mat"] = lambda x: _pycrysfml.FortFuncs_chi_mat
    if _newclass:chi_mat = staticmethod(_pycrysfml.FortFuncs_chi_mat)
    __swig_getmethods__["psd_convert"] = lambda x: _pycrysfml.FortFuncs_psd_convert
    if _newclass:psd_convert = staticmethod(_pycrysfml.FortFuncs_psd_convert)
    __swig_getmethods__["d19psd"] = lambda x: _pycrysfml.FortFuncs_d19psd
    if _newclass:d19psd = staticmethod(_pycrysfml.FortFuncs_d19psd)
    __swig_getmethods__["dspace"] = lambda x: _pycrysfml.FortFuncs_dspace
    if _newclass:dspace = staticmethod(_pycrysfml.FortFuncs_dspace)
    __swig_getmethods__["equatorial_chi_phi"] = lambda x: _pycrysfml.FortFuncs_equatorial_chi_phi
    if _newclass:equatorial_chi_phi = staticmethod(_pycrysfml.FortFuncs_equatorial_chi_phi)
    __swig_getmethods__["fixdnu"] = lambda x: _pycrysfml.FortFuncs_fixdnu
    if _newclass:fixdnu = staticmethod(_pycrysfml.FortFuncs_fixdnu)
    __swig_getmethods__["flat_cone_vertdet"] = lambda x: _pycrysfml.FortFuncs_flat_cone_vertdet
    if _newclass:flat_cone_vertdet = staticmethod(_pycrysfml.FortFuncs_flat_cone_vertdet)
    __swig_getmethods__["genub"] = lambda x: _pycrysfml.FortFuncs_genub
    if _newclass:genub = staticmethod(_pycrysfml.FortFuncs_genub)
    __swig_getmethods__["get_angs_nb"] = lambda x: _pycrysfml.FortFuncs_get_angs_nb
    if _newclass:get_angs_nb = staticmethod(_pycrysfml.FortFuncs_get_angs_nb)
    __swig_getmethods__["get_dspacing_theta"] = lambda x: _pycrysfml.FortFuncs_get_dspacing_theta
    if _newclass:get_dspacing_theta = staticmethod(_pycrysfml.FortFuncs_get_dspacing_theta)
    __swig_getmethods__["get_gaomnu_frchiphi"] = lambda x: _pycrysfml.FortFuncs_get_gaomnu_frchiphi
    if _newclass:get_gaomnu_frchiphi = staticmethod(_pycrysfml.FortFuncs_get_gaomnu_frchiphi)
    __swig_getmethods__["get_ub_from_hkl_hkl_omega"] = lambda x: _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega
    if _newclass:get_ub_from_hkl_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega)
    __swig_getmethods__["get_ub_from_uvw_hkl_omega"] = lambda x: _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega
    if _newclass:get_ub_from_uvw_hkl_omega = staticmethod(_pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega)
    __swig_getmethods__["get_waveganu_frz4"] = lambda x: _pycrysfml.FortFuncs_get_waveganu_frz4
    if _newclass:get_waveganu_frz4 = staticmethod(_pycrysfml.FortFuncs_get_waveganu_frz4)
    __swig_getmethods__["get_z1_d9angls"] = lambda x: _pycrysfml.FortFuncs_get_z1_d9angls
    if _newclass:get_z1_d9angls = staticmethod(_pycrysfml.FortFuncs_get_z1_d9angls)
    __swig_getmethods__["get_z1_from_pixel"] = lambda x: _pycrysfml.FortFuncs_get_z1_from_pixel
    if _newclass:get_z1_from_pixel = staticmethod(_pycrysfml.FortFuncs_get_z1_from_pixel)
    __swig_getmethods__["normal"] = lambda x: _pycrysfml.FortFuncs_normal
    if _newclass:normal = staticmethod(_pycrysfml.FortFuncs_normal)
    __swig_getmethods__["phi_mat"] = lambda x: _pycrysfml.FortFuncs_phi_mat
    if _newclass:phi_mat = staticmethod(_pycrysfml.FortFuncs_phi_mat)
    __swig_getmethods__["psi_mat"] = lambda x: _pycrysfml.FortFuncs_psi_mat
    if _newclass:psi_mat = staticmethod(_pycrysfml.FortFuncs_psi_mat)
    __swig_getmethods__["refvec"] = lambda x: _pycrysfml.FortFuncs_refvec
    if _newclass:refvec = staticmethod(_pycrysfml.FortFuncs_refvec)
    __swig_getmethods__["s4cnb"] = lambda x: _pycrysfml.FortFuncs_s4cnb
    if _newclass:s4cnb = staticmethod(_pycrysfml.FortFuncs_s4cnb)
    __swig_getmethods__["set_psd"] = lambda x: _pycrysfml.FortFuncs_set_psd
    if _newclass:set_psd = staticmethod(_pycrysfml.FortFuncs_set_psd)
    __swig_getmethods__["snb4c"] = lambda x: _pycrysfml.FortFuncs_snb4c
    if _newclass:snb4c = staticmethod(_pycrysfml.FortFuncs_snb4c)
    __swig_getmethods__["sxdpsd"] = lambda x: _pycrysfml.FortFuncs_sxdpsd
    if _newclass:sxdpsd = staticmethod(_pycrysfml.FortFuncs_sxdpsd)
    __swig_getmethods__["triple"] = lambda x: _pycrysfml.FortFuncs_triple
    if _newclass:triple = staticmethod(_pycrysfml.FortFuncs_triple)
    __swig_getmethods__["z1frfc"] = lambda x: _pycrysfml.FortFuncs_z1frfc
    if _newclass:z1frfc = staticmethod(_pycrysfml.FortFuncs_z1frfc)
    __swig_getmethods__["z1frmd"] = lambda x: _pycrysfml.FortFuncs_z1frmd
    if _newclass:z1frmd = staticmethod(_pycrysfml.FortFuncs_z1frmd)
    __swig_getmethods__["z1frnb"] = lambda x: _pycrysfml.FortFuncs_z1frnb
    if _newclass:z1frnb = staticmethod(_pycrysfml.FortFuncs_z1frnb)
    __swig_getmethods__["z1frz2"] = lambda x: _pycrysfml.FortFuncs_z1frz2
    if _newclass:z1frz2 = staticmethod(_pycrysfml.FortFuncs_z1frz2)
    __swig_getmethods__["z1frz3"] = lambda x: _pycrysfml.FortFuncs_z1frz3
    if _newclass:z1frz3 = staticmethod(_pycrysfml.FortFuncs_z1frz3)
    __swig_getmethods__["z1frz4"] = lambda x: _pycrysfml.FortFuncs_z1frz4
    if _newclass:z1frz4 = staticmethod(_pycrysfml.FortFuncs_z1frz4)
    __swig_getmethods__["z2frz1"] = lambda x: _pycrysfml.FortFuncs_z2frz1
    if _newclass:z2frz1 = staticmethod(_pycrysfml.FortFuncs_z2frz1)
    __swig_getmethods__["z3frz1"] = lambda x: _pycrysfml.FortFuncs_z3frz1
    if _newclass:z3frz1 = staticmethod(_pycrysfml.FortFuncs_z3frz1)
    __swig_getmethods__["z4frgn"] = lambda x: _pycrysfml.FortFuncs_z4frgn
    if _newclass:z4frgn = staticmethod(_pycrysfml.FortFuncs_z4frgn)
    __swig_getmethods__["z4frz1"] = lambda x: _pycrysfml.FortFuncs_z4frz1
    if _newclass:z4frz1 = staticmethod(_pycrysfml.FortFuncs_z4frz1)
    __swig_getmethods__["allocate_atoms_conf_list"] = lambda x: _pycrysfml.FortFuncs_allocate_atoms_conf_list
    if _newclass:allocate_atoms_conf_list = staticmethod(_pycrysfml.FortFuncs_allocate_atoms_conf_list)
    __swig_getmethods__["deallocate_bvs_table"] = lambda x: _pycrysfml.FortFuncs_deallocate_bvs_table
    if _newclass:deallocate_bvs_table = staticmethod(_pycrysfml.FortFuncs_deallocate_bvs_table)
    __swig_getmethods__["init_err_conf"] = lambda x: _pycrysfml.FortFuncs_init_err_conf
    if _newclass:init_err_conf = staticmethod(_pycrysfml.FortFuncs_init_err_conf)
    __swig_getmethods__["set_bvs_table"] = lambda x: _pycrysfml.FortFuncs_set_bvs_table
    if _newclass:set_bvs_table = staticmethod(_pycrysfml.FortFuncs_set_bvs_table)
    __swig_getmethods__["file_to_filelist"] = lambda x: _pycrysfml.FortFuncs_file_to_filelist
    if _newclass:file_to_filelist = staticmethod(_pycrysfml.FortFuncs_file_to_filelist)
    __swig_getmethods__["init_err_form"] = lambda x: _pycrysfml.FortFuncs_init_err_form
    if _newclass:init_err_form = staticmethod(_pycrysfml.FortFuncs_init_err_form)
    __swig_getmethods__["read_uvals"] = lambda x: _pycrysfml.FortFuncs_read_uvals
    if _newclass:read_uvals = staticmethod(_pycrysfml.FortFuncs_read_uvals)
    __swig_getmethods__["write_cif_powder_profile"] = lambda x: _pycrysfml.FortFuncs_write_cif_powder_profile
    if _newclass:write_cif_powder_profile = staticmethod(_pycrysfml.FortFuncs_write_cif_powder_profile)
    __swig_getmethods__["write_cif_template"] = lambda x: _pycrysfml.FortFuncs_write_cif_template
    if _newclass:write_cif_template = staticmethod(_pycrysfml.FortFuncs_write_cif_template)
    __swig_getmethods__["write_shx_template"] = lambda x: _pycrysfml.FortFuncs_write_shx_template
    if _newclass:write_shx_template = staticmethod(_pycrysfml.FortFuncs_write_shx_template)
    __swig_getmethods__["set_shubnikov_group"] = lambda x: _pycrysfml.FortFuncs_set_shubnikov_group
    if _newclass:set_shubnikov_group = staticmethod(_pycrysfml.FortFuncs_set_shubnikov_group)
    __swig_getmethods__["write_magnetic_structure"] = lambda x: _pycrysfml.FortFuncs_write_magnetic_structure
    if _newclass:write_magnetic_structure = staticmethod(_pycrysfml.FortFuncs_write_magnetic_structure)
    __swig_getmethods__["write_mcif"] = lambda x: _pycrysfml.FortFuncs_write_mcif
    if _newclass:write_mcif = staticmethod(_pycrysfml.FortFuncs_write_mcif)
    __swig_getmethods__["init_err_msfac"] = lambda x: _pycrysfml.FortFuncs_init_err_msfac
    if _newclass:init_err_msfac = staticmethod(_pycrysfml.FortFuncs_init_err_msfac)
    __swig_getmethods__["write_mag_structure_factors"] = lambda x: _pycrysfml.FortFuncs_write_mag_structure_factors
    if _newclass:write_mag_structure_factors = staticmethod(_pycrysfml.FortFuncs_write_mag_structure_factors)
    __swig_getmethods__["allocate_vparam"] = lambda x: _pycrysfml.FortFuncs_allocate_vparam
    if _newclass:allocate_vparam = staticmethod(_pycrysfml.FortFuncs_allocate_vparam)
    __swig_getmethods__["get_restang_line"] = lambda x: _pycrysfml.FortFuncs_get_restang_line
    if _newclass:get_restang_line = staticmethod(_pycrysfml.FortFuncs_get_restang_line)
    __swig_getmethods__["get_restdis_line"] = lambda x: _pycrysfml.FortFuncs_get_restdis_line
    if _newclass:get_restdis_line = staticmethod(_pycrysfml.FortFuncs_get_restdis_line)
    __swig_getmethods__["get_resttor_line"] = lambda x: _pycrysfml.FortFuncs_get_resttor_line
    if _newclass:get_resttor_line = staticmethod(_pycrysfml.FortFuncs_get_resttor_line)
    __swig_getmethods__["init_err_refcodes"] = lambda x: _pycrysfml.FortFuncs_init_err_refcodes
    if _newclass:init_err_refcodes = staticmethod(_pycrysfml.FortFuncs_init_err_refcodes)
    __swig_getmethods__["write_info_refparams"] = lambda x: _pycrysfml.FortFuncs_write_info_refparams
    if _newclass:write_info_refparams = staticmethod(_pycrysfml.FortFuncs_write_info_refparams)
    def __init__(self): 
        this = _pycrysfml.new_FortFuncs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_FortFuncs
    __del__ = lambda self : None;
FortFuncs_swigregister = _pycrysfml.FortFuncs_swigregister
FortFuncs_swigregister(FortFuncs)

def FortFuncs_directory_exists(*args):
  return _pycrysfml.FortFuncs_directory_exists(*args)
FortFuncs_directory_exists = _pycrysfml.FortFuncs_directory_exists

def FortFuncs_write_date_time(lun=None, dtim=None):
  return _pycrysfml.FortFuncs_write_date_time(lun, dtim)
FortFuncs_write_date_time = _pycrysfml.FortFuncs_write_date_time

def FortFuncs_bessj(*args):
  return _pycrysfml.FortFuncs_bessj(*args)
FortFuncs_bessj = _pycrysfml.FortFuncs_bessj

def FortFuncs_pgcd(*args):
  return _pycrysfml.FortFuncs_pgcd(*args)
FortFuncs_pgcd = _pycrysfml.FortFuncs_pgcd

def FortFuncs_ppcm(*args):
  return _pycrysfml.FortFuncs_ppcm(*args)
FortFuncs_ppcm = _pycrysfml.FortFuncs_ppcm

def FortFuncs_init_err_mathgen():
  return _pycrysfml.FortFuncs_init_err_mathgen()
FortFuncs_init_err_mathgen = _pycrysfml.FortFuncs_init_err_mathgen

def FortFuncs_set_epsg(*args):
  return _pycrysfml.FortFuncs_set_epsg(*args)
FortFuncs_set_epsg = _pycrysfml.FortFuncs_set_epsg

def FortFuncs_set_epsg_default():
  return _pycrysfml.FortFuncs_set_epsg_default()
FortFuncs_set_epsg_default = _pycrysfml.FortFuncs_set_epsg_default

def FortFuncs_init_err_spher():
  return _pycrysfml.FortFuncs_init_err_spher()
FortFuncs_init_err_spher = _pycrysfml.FortFuncs_init_err_spher

def FortFuncs_pikout_lj_cubic(*args):
  return _pycrysfml.FortFuncs_pikout_lj_cubic(*args)
FortFuncs_pikout_lj_cubic = _pycrysfml.FortFuncs_pikout_lj_cubic

def FortFuncs_init_err_random():
  return _pycrysfml.FortFuncs_init_err_random()
FortFuncs_init_err_random = _pycrysfml.FortFuncs_init_err_random

def FortFuncs_random_beta(*args):
  return _pycrysfml.FortFuncs_random_beta(*args)
FortFuncs_random_beta = _pycrysfml.FortFuncs_random_beta

def FortFuncs_random_binomial1(*args):
  return _pycrysfml.FortFuncs_random_binomial1(*args)
FortFuncs_random_binomial1 = _pycrysfml.FortFuncs_random_binomial1

def FortFuncs_random_binomial2(*args):
  return _pycrysfml.FortFuncs_random_binomial2(*args)
FortFuncs_random_binomial2 = _pycrysfml.FortFuncs_random_binomial2

def FortFuncs_random_cauchy(*args):
  return _pycrysfml.FortFuncs_random_cauchy(*args)
FortFuncs_random_cauchy = _pycrysfml.FortFuncs_random_cauchy

def FortFuncs_random_chisq(*args):
  return _pycrysfml.FortFuncs_random_chisq(*args)
FortFuncs_random_chisq = _pycrysfml.FortFuncs_random_chisq

def FortFuncs_random_exponential(*args):
  return _pycrysfml.FortFuncs_random_exponential(*args)
FortFuncs_random_exponential = _pycrysfml.FortFuncs_random_exponential

def FortFuncs_random_gamma(*args):
  return _pycrysfml.FortFuncs_random_gamma(*args)
FortFuncs_random_gamma = _pycrysfml.FortFuncs_random_gamma

def FortFuncs_random_gamma1(*args):
  return _pycrysfml.FortFuncs_random_gamma1(*args)
FortFuncs_random_gamma1 = _pycrysfml.FortFuncs_random_gamma1

def FortFuncs_random_gamma2(*args):
  return _pycrysfml.FortFuncs_random_gamma2(*args)
FortFuncs_random_gamma2 = _pycrysfml.FortFuncs_random_gamma2

def FortFuncs_random_inv_gauss(*args):
  return _pycrysfml.FortFuncs_random_inv_gauss(*args)
FortFuncs_random_inv_gauss = _pycrysfml.FortFuncs_random_inv_gauss

def FortFuncs_random_mvnorm(*args):
  return _pycrysfml.FortFuncs_random_mvnorm(*args)
FortFuncs_random_mvnorm = _pycrysfml.FortFuncs_random_mvnorm

def FortFuncs_random_neg_binomial(*args):
  return _pycrysfml.FortFuncs_random_neg_binomial(*args)
FortFuncs_random_neg_binomial = _pycrysfml.FortFuncs_random_neg_binomial

def FortFuncs_random_normal(*args):
  return _pycrysfml.FortFuncs_random_normal(*args)
FortFuncs_random_normal = _pycrysfml.FortFuncs_random_normal

def FortFuncs_random_order(*args):
  return _pycrysfml.FortFuncs_random_order(*args)
FortFuncs_random_order = _pycrysfml.FortFuncs_random_order

def FortFuncs_random_poisson(*args):
  return _pycrysfml.FortFuncs_random_poisson(*args)
FortFuncs_random_poisson = _pycrysfml.FortFuncs_random_poisson

def FortFuncs_random_t(*args):
  return _pycrysfml.FortFuncs_random_t(*args)
FortFuncs_random_t = _pycrysfml.FortFuncs_random_t

def FortFuncs_random_von_mises(*args):
  return _pycrysfml.FortFuncs_random_von_mises(*args)
FortFuncs_random_von_mises = _pycrysfml.FortFuncs_random_von_mises

def FortFuncs_random_weibull(*args):
  return _pycrysfml.FortFuncs_random_weibull(*args)
FortFuncs_random_weibull = _pycrysfml.FortFuncs_random_weibull

def FortFuncs_seed_random_number(i_input=None, i_output=None):
  return _pycrysfml.FortFuncs_seed_random_number(i_input, i_output)
FortFuncs_seed_random_number = _pycrysfml.FortFuncs_seed_random_number

def FortFuncs_string_count(*args):
  return _pycrysfml.FortFuncs_string_count(*args)
FortFuncs_string_count = _pycrysfml.FortFuncs_string_count

def FortFuncs_frac_trans_1dig(*args):
  return _pycrysfml.FortFuncs_frac_trans_1dig(*args)
FortFuncs_frac_trans_1dig = _pycrysfml.FortFuncs_frac_trans_1dig

def FortFuncs_frac_trans_2dig(*args):
  return _pycrysfml.FortFuncs_frac_trans_2dig(*args)
FortFuncs_frac_trans_2dig = _pycrysfml.FortFuncs_frac_trans_2dig

def FortFuncs_get_basename(*args):
  return _pycrysfml.FortFuncs_get_basename(*args)
FortFuncs_get_basename = _pycrysfml.FortFuncs_get_basename

def FortFuncs_get_dirname(*args):
  return _pycrysfml.FortFuncs_get_dirname(*args)
FortFuncs_get_dirname = _pycrysfml.FortFuncs_get_dirname

def FortFuncs_get_extension(*args):
  return _pycrysfml.FortFuncs_get_extension(*args)
FortFuncs_get_extension = _pycrysfml.FortFuncs_get_extension

def FortFuncs_get_fraction_1dig(*args):
  return _pycrysfml.FortFuncs_get_fraction_1dig(*args)
FortFuncs_get_fraction_1dig = _pycrysfml.FortFuncs_get_fraction_1dig

def FortFuncs_get_fraction_2dig(*args):
  return _pycrysfml.FortFuncs_get_fraction_2dig(*args)
FortFuncs_get_fraction_2dig = _pycrysfml.FortFuncs_get_fraction_2dig

def FortFuncs_get_logunit(*args):
  return _pycrysfml.FortFuncs_get_logunit(*args)
FortFuncs_get_logunit = _pycrysfml.FortFuncs_get_logunit

def FortFuncs_get_transf(*args):
  return _pycrysfml.FortFuncs_get_transf(*args)
FortFuncs_get_transf = _pycrysfml.FortFuncs_get_transf

def FortFuncs_inc_linenum(*args):
  return _pycrysfml.FortFuncs_inc_linenum(*args)
FortFuncs_inc_linenum = _pycrysfml.FortFuncs_inc_linenum

def FortFuncs_init_err_string():
  return _pycrysfml.FortFuncs_init_err_string()
FortFuncs_init_err_string = _pycrysfml.FortFuncs_init_err_string

def FortFuncs_init_findfmt(nline=None):
  return _pycrysfml.FortFuncs_init_findfmt(nline)
FortFuncs_init_findfmt = _pycrysfml.FortFuncs_init_findfmt

def FortFuncs_number_lines(*args):
  return _pycrysfml.FortFuncs_number_lines(*args)
FortFuncs_number_lines = _pycrysfml.FortFuncs_number_lines

def FortFuncs_numcol_from_numfmt(*args):
  return _pycrysfml.FortFuncs_numcol_from_numfmt(*args)
FortFuncs_numcol_from_numfmt = _pycrysfml.FortFuncs_numcol_from_numfmt

def FortFuncs_setnum_std(*args):
  return _pycrysfml.FortFuncs_setnum_std(*args)
FortFuncs_setnum_std = _pycrysfml.FortFuncs_setnum_std

def FortFuncs_error_message(*args):
  return _pycrysfml.FortFuncs_error_message(*args)
FortFuncs_error_message = _pycrysfml.FortFuncs_error_message

def FortFuncs_info_message(*args):
  return _pycrysfml.FortFuncs_info_message(*args)
FortFuncs_info_message = _pycrysfml.FortFuncs_info_message

def FortFuncs_print_message(*args):
  return _pycrysfml.FortFuncs_print_message(*args)
FortFuncs_print_message = _pycrysfml.FortFuncs_print_message

def FortFuncs_wait_message(mess=None):
  return _pycrysfml.FortFuncs_wait_message(mess)
FortFuncs_wait_message = _pycrysfml.FortFuncs_wait_message

def FortFuncs_write_scroll_text(*args):
  return _pycrysfml.FortFuncs_write_scroll_text(*args)
FortFuncs_write_scroll_text = _pycrysfml.FortFuncs_write_scroll_text

def FortFuncs_tof_carpenter(*args):
  return _pycrysfml.FortFuncs_tof_carpenter(*args)
FortFuncs_tof_carpenter = _pycrysfml.FortFuncs_tof_carpenter

def FortFuncs_tof_jorgensen(*args):
  return _pycrysfml.FortFuncs_tof_jorgensen(*args)
FortFuncs_tof_jorgensen = _pycrysfml.FortFuncs_tof_jorgensen

def FortFuncs_tof_jorgensen_vondreele(*args):
  return _pycrysfml.FortFuncs_tof_jorgensen_vondreele(*args)
FortFuncs_tof_jorgensen_vondreele = _pycrysfml.FortFuncs_tof_jorgensen_vondreele

def FortFuncs_init_prof_val():
  return _pycrysfml.FortFuncs_init_prof_val()
FortFuncs_init_prof_val = _pycrysfml.FortFuncs_init_prof_val

def FortFuncs_prof_val(*args):
  return _pycrysfml.FortFuncs_prof_val(*args)
FortFuncs_prof_val = _pycrysfml.FortFuncs_prof_val

def FortFuncs_veclength(*args):
  return _pycrysfml.FortFuncs_veclength(*args)
FortFuncs_veclength = _pycrysfml.FortFuncs_veclength

def FortFuncs_init_err_math3d():
  return _pycrysfml.FortFuncs_init_err_math3d()
FortFuncs_init_err_math3d = _pycrysfml.FortFuncs_init_err_math3d

def FortFuncs_set_eps(*args):
  return _pycrysfml.FortFuncs_set_eps(*args)
FortFuncs_set_eps = _pycrysfml.FortFuncs_set_eps

def FortFuncs_set_eps_default():
  return _pycrysfml.FortFuncs_set_eps_default()
FortFuncs_set_eps_default = _pycrysfml.FortFuncs_set_eps_default

def FortFuncs_get_plane_from_points(*args):
  return _pycrysfml.FortFuncs_get_plane_from_points(*args)
FortFuncs_get_plane_from_points = _pycrysfml.FortFuncs_get_plane_from_points

def FortFuncs_matrix_diageigen(*args):
  return _pycrysfml.FortFuncs_matrix_diageigen(*args)
FortFuncs_matrix_diageigen = _pycrysfml.FortFuncs_matrix_diageigen

def FortFuncs_matrix_inverse(*args):
  return _pycrysfml.FortFuncs_matrix_inverse(*args)
FortFuncs_matrix_inverse = _pycrysfml.FortFuncs_matrix_inverse

def FortFuncs_resolv_sist_1x2(*args):
  return _pycrysfml.FortFuncs_resolv_sist_1x2(*args)
FortFuncs_resolv_sist_1x2 = _pycrysfml.FortFuncs_resolv_sist_1x2

def FortFuncs_resolv_sist_1x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_1x3(*args)
FortFuncs_resolv_sist_1x3 = _pycrysfml.FortFuncs_resolv_sist_1x3

def FortFuncs_resolv_sist_2x2(*args):
  return _pycrysfml.FortFuncs_resolv_sist_2x2(*args)
FortFuncs_resolv_sist_2x2 = _pycrysfml.FortFuncs_resolv_sist_2x2

def FortFuncs_resolv_sist_2x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_2x3(*args)
FortFuncs_resolv_sist_2x3 = _pycrysfml.FortFuncs_resolv_sist_2x3

def FortFuncs_resolv_sist_3x3(*args):
  return _pycrysfml.FortFuncs_resolv_sist_3x3(*args)
FortFuncs_resolv_sist_3x3 = _pycrysfml.FortFuncs_resolv_sist_3x3

def FortFuncs_init_err_optim():
  return _pycrysfml.FortFuncs_init_err_optim()
FortFuncs_init_err_optim = _pycrysfml.FortFuncs_init_err_optim

def FortFuncs_write_optimization_conditions(*args):
  return _pycrysfml.FortFuncs_write_optimization_conditions(*args)
FortFuncs_write_optimization_conditions = _pycrysfml.FortFuncs_write_optimization_conditions

def FortFuncs_get_generators(*args):
  return _pycrysfml.FortFuncs_get_generators(*args)
FortFuncs_get_generators = _pycrysfml.FortFuncs_get_generators

def FortFuncs_remove_spgr_info():
  return _pycrysfml.FortFuncs_remove_spgr_info()
FortFuncs_remove_spgr_info = _pycrysfml.FortFuncs_remove_spgr_info

def FortFuncs_remove_system_equiv():
  return _pycrysfml.FortFuncs_remove_system_equiv()
FortFuncs_remove_system_equiv = _pycrysfml.FortFuncs_remove_system_equiv

def FortFuncs_remove_wyckoff_info():
  return _pycrysfml.FortFuncs_remove_wyckoff_info()
FortFuncs_remove_wyckoff_info = _pycrysfml.FortFuncs_remove_wyckoff_info

def FortFuncs_set_spgr_info():
  return _pycrysfml.FortFuncs_set_spgr_info()
FortFuncs_set_spgr_info = _pycrysfml.FortFuncs_set_spgr_info

def FortFuncs_set_system_equiv():
  return _pycrysfml.FortFuncs_set_system_equiv()
FortFuncs_set_system_equiv = _pycrysfml.FortFuncs_set_system_equiv

def FortFuncs_set_wyckoff_info():
  return _pycrysfml.FortFuncs_set_wyckoff_info()
FortFuncs_set_wyckoff_info = _pycrysfml.FortFuncs_set_wyckoff_info

def FortFuncs_get_atomic_mass(*args):
  return _pycrysfml.FortFuncs_get_atomic_mass(*args)
FortFuncs_get_atomic_mass = _pycrysfml.FortFuncs_get_atomic_mass

def FortFuncs_get_atomic_vol(*args):
  return _pycrysfml.FortFuncs_get_atomic_vol(*args)
FortFuncs_get_atomic_vol = _pycrysfml.FortFuncs_get_atomic_vol

def FortFuncs_get_chemsymb(*args):
  return _pycrysfml.FortFuncs_get_chemsymb(*args)
FortFuncs_get_chemsymb = _pycrysfml.FortFuncs_get_chemsymb

def FortFuncs_get_covalent_radius(*args):
  return _pycrysfml.FortFuncs_get_covalent_radius(*args)
FortFuncs_get_covalent_radius = _pycrysfml.FortFuncs_get_covalent_radius

def FortFuncs_get_fermi_length(*args):
  return _pycrysfml.FortFuncs_get_fermi_length(*args)
FortFuncs_get_fermi_length = _pycrysfml.FortFuncs_get_fermi_length

def FortFuncs_get_inc_xs(*args):
  return _pycrysfml.FortFuncs_get_inc_xs(*args)
FortFuncs_get_inc_xs = _pycrysfml.FortFuncs_get_inc_xs

def FortFuncs_get_abs_xs(*args):
  return _pycrysfml.FortFuncs_get_abs_xs(*args)
FortFuncs_get_abs_xs = _pycrysfml.FortFuncs_get_abs_xs

def FortFuncs_get_ionic_radius(*args):
  return _pycrysfml.FortFuncs_get_ionic_radius(*args)
FortFuncs_get_ionic_radius = _pycrysfml.FortFuncs_get_ionic_radius

def FortFuncs_remove_chem_info():
  return _pycrysfml.FortFuncs_remove_chem_info()
FortFuncs_remove_chem_info = _pycrysfml.FortFuncs_remove_chem_info

def FortFuncs_remove_delta_fp_fpp():
  return _pycrysfml.FortFuncs_remove_delta_fp_fpp()
FortFuncs_remove_delta_fp_fpp = _pycrysfml.FortFuncs_remove_delta_fp_fpp

def FortFuncs_remove_magnetic_form():
  return _pycrysfml.FortFuncs_remove_magnetic_form()
FortFuncs_remove_magnetic_form = _pycrysfml.FortFuncs_remove_magnetic_form

def FortFuncs_remove_xray_form():
  return _pycrysfml.FortFuncs_remove_xray_form()
FortFuncs_remove_xray_form = _pycrysfml.FortFuncs_remove_xray_form

def FortFuncs_set_chem_info():
  return _pycrysfml.FortFuncs_set_chem_info()
FortFuncs_set_chem_info = _pycrysfml.FortFuncs_set_chem_info

def FortFuncs_set_delta_fp_fpp():
  return _pycrysfml.FortFuncs_set_delta_fp_fpp()
FortFuncs_set_delta_fp_fpp = _pycrysfml.FortFuncs_set_delta_fp_fpp

def FortFuncs_set_magnetic_form():
  return _pycrysfml.FortFuncs_set_magnetic_form()
FortFuncs_set_magnetic_form = _pycrysfml.FortFuncs_set_magnetic_form

def FortFuncs_set_xray_form():
  return _pycrysfml.FortFuncs_set_xray_form()
FortFuncs_set_xray_form = _pycrysfml.FortFuncs_set_xray_form

def FortFuncs_init_err_diffpatt():
  return _pycrysfml.FortFuncs_init_err_diffpatt()
FortFuncs_init_err_diffpatt = _pycrysfml.FortFuncs_init_err_diffpatt

def FortFuncs_read_background_file(*args):
  return _pycrysfml.FortFuncs_read_background_file(*args)
FortFuncs_read_background_file = _pycrysfml.FortFuncs_read_background_file

def FortFuncs_write_pattern_freeformat(*args):
  return _pycrysfml.FortFuncs_write_pattern_freeformat(*args)
FortFuncs_write_pattern_freeformat = _pycrysfml.FortFuncs_write_pattern_freeformat

def FortFuncs_write_pattern_instrm5(*args):
  return _pycrysfml.FortFuncs_write_pattern_instrm5(*args)
FortFuncs_write_pattern_instrm5 = _pycrysfml.FortFuncs_write_pattern_instrm5

def FortFuncs_write_pattern_xysig(*args):
  return _pycrysfml.FortFuncs_write_pattern_xysig(*args)
FortFuncs_write_pattern_xysig = _pycrysfml.FortFuncs_write_pattern_xysig

def FortFuncs_init_err_bond():
  return _pycrysfml.FortFuncs_init_err_bond()
FortFuncs_init_err_bond = _pycrysfml.FortFuncs_init_err_bond

def FortFuncs_remove_bonds_table():
  return _pycrysfml.FortFuncs_remove_bonds_table()
FortFuncs_remove_bonds_table = _pycrysfml.FortFuncs_remove_bonds_table

def FortFuncs_set_bonds_table():
  return _pycrysfml.FortFuncs_set_bonds_table()
FortFuncs_set_bonds_table = _pycrysfml.FortFuncs_set_bonds_table

def FortFuncs_get_basis_from_uvw(*args):
  return _pycrysfml.FortFuncs_get_basis_from_uvw(*args)
FortFuncs_get_basis_from_uvw = _pycrysfml.FortFuncs_get_basis_from_uvw

def FortFuncs_get_primitive_cell(*args):
  return _pycrysfml.FortFuncs_get_primitive_cell(*args)
FortFuncs_get_primitive_cell = _pycrysfml.FortFuncs_get_primitive_cell

def FortFuncs_init_err_crys():
  return _pycrysfml.FortFuncs_init_err_crys()
FortFuncs_init_err_crys = _pycrysfml.FortFuncs_init_err_crys

def FortFuncs_set_crystal_cell(*args):
  return _pycrysfml.FortFuncs_set_crystal_cell(*args)
FortFuncs_set_crystal_cell = _pycrysfml.FortFuncs_set_crystal_cell

def FortFuncs_volume_sigma_from_cell(*args):
  return _pycrysfml.FortFuncs_volume_sigma_from_cell(*args)
FortFuncs_volume_sigma_from_cell = _pycrysfml.FortFuncs_volume_sigma_from_cell

def FortFuncs_axes_rotation(*args):
  return _pycrysfml.FortFuncs_axes_rotation(*args)
FortFuncs_axes_rotation = _pycrysfml.FortFuncs_axes_rotation

def FortFuncs_get_laue_num(*args):
  return _pycrysfml.FortFuncs_get_laue_num(*args)
FortFuncs_get_laue_num = _pycrysfml.FortFuncs_get_laue_num

def FortFuncs_get_multip_pos(*args):
  return _pycrysfml.FortFuncs_get_multip_pos(*args)
FortFuncs_get_multip_pos = _pycrysfml.FortFuncs_get_multip_pos

def FortFuncs_get_occ_site(*args):
  return _pycrysfml.FortFuncs_get_occ_site(*args)
FortFuncs_get_occ_site = _pycrysfml.FortFuncs_get_occ_site

def FortFuncs_get_pointgroup_num(*args):
  return _pycrysfml.FortFuncs_get_pointgroup_num(*args)
FortFuncs_get_pointgroup_num = _pycrysfml.FortFuncs_get_pointgroup_num

def FortFuncs_lattice_trans(*args):
  return _pycrysfml.FortFuncs_lattice_trans(*args)
FortFuncs_lattice_trans = _pycrysfml.FortFuncs_lattice_trans

def FortFuncs_check_generator(*args):
  return _pycrysfml.FortFuncs_check_generator(*args)
FortFuncs_check_generator = _pycrysfml.FortFuncs_check_generator

def FortFuncs_decodmatmag(*args):
  return _pycrysfml.FortFuncs_decodmatmag(*args)
FortFuncs_decodmatmag = _pycrysfml.FortFuncs_decodmatmag

def FortFuncs_get_laue_str(*args):
  return _pycrysfml.FortFuncs_get_laue_str(*args)
FortFuncs_get_laue_str = _pycrysfml.FortFuncs_get_laue_str

def FortFuncs_get_pointgroup_str(*args):
  return _pycrysfml.FortFuncs_get_pointgroup_str(*args)
FortFuncs_get_pointgroup_str = _pycrysfml.FortFuncs_get_pointgroup_str

def FortFuncs_get_seitz_symbol(*args):
  return _pycrysfml.FortFuncs_get_seitz_symbol(*args)
FortFuncs_get_seitz_symbol = _pycrysfml.FortFuncs_get_seitz_symbol

def FortFuncs_get_shubnikov_operator_symbol(*args):
  return _pycrysfml.FortFuncs_get_shubnikov_operator_symbol(*args)
FortFuncs_get_shubnikov_operator_symbol = _pycrysfml.FortFuncs_get_shubnikov_operator_symbol

def FortFuncs_get_string_resolv(*args):
  return _pycrysfml.FortFuncs_get_string_resolv(*args)
FortFuncs_get_string_resolv = _pycrysfml.FortFuncs_get_string_resolv

def FortFuncs_get_symel(*args):
  return _pycrysfml.FortFuncs_get_symel(*args)
FortFuncs_get_symel = _pycrysfml.FortFuncs_get_symel

def FortFuncs_get_symkov(*args):
  return _pycrysfml.FortFuncs_get_symkov(*args)
FortFuncs_get_symkov = _pycrysfml.FortFuncs_get_symkov

def FortFuncs_get_trasfm_symbol(*args):
  return _pycrysfml.FortFuncs_get_trasfm_symbol(*args)
FortFuncs_get_trasfm_symbol = _pycrysfml.FortFuncs_get_trasfm_symbol

def FortFuncs_get_transl_symbol(*args):
  return _pycrysfml.FortFuncs_get_transl_symbol(*args)
FortFuncs_get_transl_symbol = _pycrysfml.FortFuncs_get_transl_symbol

def FortFuncs_init_err_symm():
  return _pycrysfml.FortFuncs_init_err_symm()
FortFuncs_init_err_symm = _pycrysfml.FortFuncs_init_err_symm

def FortFuncs_inverse_symm(*args):
  return _pycrysfml.FortFuncs_inverse_symm(*args)
FortFuncs_inverse_symm = _pycrysfml.FortFuncs_inverse_symm

def FortFuncs_latsym(*args):
  return _pycrysfml.FortFuncs_latsym(*args)
FortFuncs_latsym = _pycrysfml.FortFuncs_latsym

def FortFuncs_read_msymm(*args):
  return _pycrysfml.FortFuncs_read_msymm(*args)
FortFuncs_read_msymm = _pycrysfml.FortFuncs_read_msymm

def FortFuncs_read_symtrans_code(*args):
  return _pycrysfml.FortFuncs_read_symtrans_code(*args)
FortFuncs_read_symtrans_code = _pycrysfml.FortFuncs_read_symtrans_code

def FortFuncs_read_xsym(*args):
  return _pycrysfml.FortFuncs_read_xsym(*args)
FortFuncs_read_xsym = _pycrysfml.FortFuncs_read_xsym

def FortFuncs_searchop(*args):
  return _pycrysfml.FortFuncs_searchop(*args)
FortFuncs_searchop = _pycrysfml.FortFuncs_searchop

def FortFuncs_set_spacegroup(*args):
  return _pycrysfml.FortFuncs_set_spacegroup(*args)
FortFuncs_set_spacegroup = _pycrysfml.FortFuncs_set_spacegroup

def FortFuncs_similar_transf_sg(*args):
  return _pycrysfml.FortFuncs_similar_transf_sg(*args)
FortFuncs_similar_transf_sg = _pycrysfml.FortFuncs_similar_transf_sg

def FortFuncs_sym_prod_st(*args):
  return _pycrysfml.FortFuncs_sym_prod_st(*args)
FortFuncs_sym_prod_st = _pycrysfml.FortFuncs_sym_prod_st

def FortFuncs_write_sym(*args):
  return _pycrysfml.FortFuncs_write_sym(*args)
FortFuncs_write_sym = _pycrysfml.FortFuncs_write_sym

def FortFuncs_write_symtrans_code(*args):
  return _pycrysfml.FortFuncs_write_symtrans_code(*args)
FortFuncs_write_symtrans_code = _pycrysfml.FortFuncs_write_symtrans_code

def FortFuncs_define_uncompress_program(*args):
  return _pycrysfml.FortFuncs_define_uncompress_program(*args)
FortFuncs_define_uncompress_program = _pycrysfml.FortFuncs_define_uncompress_program

def FortFuncs_get_absolute_data_path(*args):
  return _pycrysfml.FortFuncs_get_absolute_data_path(*args)
FortFuncs_get_absolute_data_path = _pycrysfml.FortFuncs_get_absolute_data_path

def FortFuncs_get_next_yearcycle(*args):
  return _pycrysfml.FortFuncs_get_next_yearcycle(*args)
FortFuncs_get_next_yearcycle = _pycrysfml.FortFuncs_get_next_yearcycle

def FortFuncs_init_err_illdata():
  return _pycrysfml.FortFuncs_init_err_illdata()
FortFuncs_init_err_illdata = _pycrysfml.FortFuncs_init_err_illdata

def FortFuncs_initialize_data_directory():
  return _pycrysfml.FortFuncs_initialize_data_directory()
FortFuncs_initialize_data_directory = _pycrysfml.FortFuncs_initialize_data_directory

def FortFuncs_read_current_instrm(*args):
  return _pycrysfml.FortFuncs_read_current_instrm(*args)
FortFuncs_read_current_instrm = _pycrysfml.FortFuncs_read_current_instrm

def FortFuncs_set_current_orient(*args):
  return _pycrysfml.FortFuncs_set_current_orient(*args)
FortFuncs_set_current_orient = _pycrysfml.FortFuncs_set_current_orient

def FortFuncs_set_default_instrument(typ=None, wav=None):
  return _pycrysfml.FortFuncs_set_default_instrument(typ, wav)
FortFuncs_set_default_instrument = _pycrysfml.FortFuncs_set_default_instrument

def FortFuncs_set_ill_data_directory(*args):
  return _pycrysfml.FortFuncs_set_ill_data_directory(*args)
FortFuncs_set_ill_data_directory = _pycrysfml.FortFuncs_set_ill_data_directory

def FortFuncs_set_instrm_directory(working_dir=None, instrm=None, iyear=None, icycle=None):
  return _pycrysfml.FortFuncs_set_instrm_directory(working_dir, instrm, iyear, icycle)
FortFuncs_set_instrm_directory = _pycrysfml.FortFuncs_set_instrm_directory

def FortFuncs_set_instrm_geometry_directory(env_var=None):
  return _pycrysfml.FortFuncs_set_instrm_geometry_directory(env_var)
FortFuncs_set_instrm_geometry_directory = _pycrysfml.FortFuncs_set_instrm_geometry_directory

def FortFuncs_update_current_instrm_ub(*args):
  return _pycrysfml.FortFuncs_update_current_instrm_ub(*args)
FortFuncs_update_current_instrm_ub = _pycrysfml.FortFuncs_update_current_instrm_ub

def FortFuncs_write_current_instrm_data(lun=None, fil=None):
  return _pycrysfml.FortFuncs_write_current_instrm_data(lun, fil)
FortFuncs_write_current_instrm_data = _pycrysfml.FortFuncs_write_current_instrm_data

def FortFuncs_read_calibration_file(*args):
  return _pycrysfml.FortFuncs_read_calibration_file(*args)
FortFuncs_read_calibration_file = _pycrysfml.FortFuncs_read_calibration_file

def FortFuncs_get_maxnumref(*args):
  return _pycrysfml.FortFuncs_get_maxnumref(*args)
FortFuncs_get_maxnumref = _pycrysfml.FortFuncs_get_maxnumref

def FortFuncs_init_err_refl():
  return _pycrysfml.FortFuncs_init_err_refl()
FortFuncs_init_err_refl = _pycrysfml.FortFuncs_init_err_refl

def FortFuncs_equiv_atm(*args):
  return _pycrysfml.FortFuncs_equiv_atm(*args)
FortFuncs_equiv_atm = _pycrysfml.FortFuncs_equiv_atm

def FortFuncs_allocate_atoms_cell(*args):
  return _pycrysfml.FortFuncs_allocate_atoms_cell(*args)
FortFuncs_allocate_atoms_cell = _pycrysfml.FortFuncs_allocate_atoms_cell

def FortFuncs_allocate_atom_list(*args):
  return _pycrysfml.FortFuncs_allocate_atom_list(*args)
FortFuncs_allocate_atom_list = _pycrysfml.FortFuncs_allocate_atom_list

def FortFuncs_allocate_matom_list(*args):
  return _pycrysfml.FortFuncs_allocate_matom_list(*args)
FortFuncs_allocate_matom_list = _pycrysfml.FortFuncs_allocate_matom_list

def FortFuncs_init_err_atmd():
  return _pycrysfml.FortFuncs_init_err_atmd()
FortFuncs_init_err_atmd = _pycrysfml.FortFuncs_init_err_atmd

def FortFuncs_multi(*args):
  return _pycrysfml.FortFuncs_multi(*args)
FortFuncs_multi = _pycrysfml.FortFuncs_multi

def FortFuncs_write_cfl(*args):
  return _pycrysfml.FortFuncs_write_cfl(*args)
FortFuncs_write_cfl = _pycrysfml.FortFuncs_write_cfl

def FortFuncs_calc_strfactor(*args):
  return _pycrysfml.FortFuncs_calc_strfactor(*args)
FortFuncs_calc_strfactor = _pycrysfml.FortFuncs_calc_strfactor

def FortFuncs_calc_hkl_strfactor(*args):
  return _pycrysfml.FortFuncs_calc_hkl_strfactor(*args)
FortFuncs_calc_hkl_strfactor = _pycrysfml.FortFuncs_calc_hkl_strfactor

def FortFuncs_write_structure_factors(*args):
  return _pycrysfml.FortFuncs_write_structure_factors(*args)
FortFuncs_write_structure_factors = _pycrysfml.FortFuncs_write_structure_factors

def FortFuncs_allocate_coordination_type(*args):
  return _pycrysfml.FortFuncs_allocate_coordination_type(*args)
FortFuncs_allocate_coordination_type = _pycrysfml.FortFuncs_allocate_coordination_type

def FortFuncs_allocate_point_list(*args):
  return _pycrysfml.FortFuncs_allocate_point_list(*args)
FortFuncs_allocate_point_list = _pycrysfml.FortFuncs_allocate_point_list

def FortFuncs_calc_dist_angle(*args):
  return _pycrysfml.FortFuncs_calc_dist_angle(*args)
FortFuncs_calc_dist_angle = _pycrysfml.FortFuncs_calc_dist_angle

def FortFuncs_calc_dist_angle_sigma(*args):
  return _pycrysfml.FortFuncs_calc_dist_angle_sigma(*args)
FortFuncs_calc_dist_angle_sigma = _pycrysfml.FortFuncs_calc_dist_angle_sigma

def FortFuncs_deallocate_coordination_type():
  return _pycrysfml.FortFuncs_deallocate_coordination_type()
FortFuncs_deallocate_coordination_type = _pycrysfml.FortFuncs_deallocate_coordination_type

def FortFuncs_get_anglen_axis_from_rotmat(*args):
  return _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat(*args)
FortFuncs_get_anglen_axis_from_rotmat = _pycrysfml.FortFuncs_get_anglen_axis_from_rotmat

def FortFuncs_get_euler_from_fract(*args):
  return _pycrysfml.FortFuncs_get_euler_from_fract(*args)
FortFuncs_get_euler_from_fract = _pycrysfml.FortFuncs_get_euler_from_fract

def FortFuncs_get_matrix_moving_v_to_u(*args):
  return _pycrysfml.FortFuncs_get_matrix_moving_v_to_u(*args)
FortFuncs_get_matrix_moving_v_to_u = _pycrysfml.FortFuncs_get_matrix_moving_v_to_u

def FortFuncs_get_omegachiphi(*args):
  return _pycrysfml.FortFuncs_get_omegachiphi(*args)
FortFuncs_get_omegachiphi = _pycrysfml.FortFuncs_get_omegachiphi

def FortFuncs_get_phithechi(*args):
  return _pycrysfml.FortFuncs_get_phithechi(*args)
FortFuncs_get_phithechi = _pycrysfml.FortFuncs_get_phithechi

def FortFuncs_get_transf_list(*args):
  return _pycrysfml.FortFuncs_get_transf_list(*args)
FortFuncs_get_transf_list = _pycrysfml.FortFuncs_get_transf_list

def FortFuncs_init_err_geom():
  return _pycrysfml.FortFuncs_init_err_geom()
FortFuncs_init_err_geom = _pycrysfml.FortFuncs_init_err_geom

def FortFuncs_p1_dist(*args):
  return _pycrysfml.FortFuncs_p1_dist(*args)
FortFuncs_p1_dist = _pycrysfml.FortFuncs_p1_dist

def FortFuncs_print_distances(*args):
  return _pycrysfml.FortFuncs_print_distances(*args)
FortFuncs_print_distances = _pycrysfml.FortFuncs_print_distances

def FortFuncs_set_rotation_matrix(*args):
  return _pycrysfml.FortFuncs_set_rotation_matrix(*args)
FortFuncs_set_rotation_matrix = _pycrysfml.FortFuncs_set_rotation_matrix

def FortFuncs_set_tdist_coordination(*args):
  return _pycrysfml.FortFuncs_set_tdist_coordination(*args)
FortFuncs_set_tdist_coordination = _pycrysfml.FortFuncs_set_tdist_coordination

def FortFuncs_set_tdist_partial_coordination(*args):
  return _pycrysfml.FortFuncs_set_tdist_partial_coordination(*args)
FortFuncs_set_tdist_partial_coordination = _pycrysfml.FortFuncs_set_tdist_partial_coordination

def FortFuncs_hk_equiv(*args):
  return _pycrysfml.FortFuncs_hk_equiv(*args)
FortFuncs_hk_equiv = _pycrysfml.FortFuncs_hk_equiv

def FortFuncs_k_equiv(*args):
  return _pycrysfml.FortFuncs_k_equiv(*args)
FortFuncs_k_equiv = _pycrysfml.FortFuncs_k_equiv

def FortFuncs_k_equiv_minus_k(*args):
  return _pycrysfml.FortFuncs_k_equiv_minus_k(*args)
FortFuncs_k_equiv_minus_k = _pycrysfml.FortFuncs_k_equiv_minus_k

def FortFuncs_k_star(*args):
  return _pycrysfml.FortFuncs_k_star(*args)
FortFuncs_k_star = _pycrysfml.FortFuncs_k_star

def FortFuncs_index_cube(*args):
  return _pycrysfml.FortFuncs_index_cube(*args)
FortFuncs_index_cube = _pycrysfml.FortFuncs_index_cube

def FortFuncs_vpoint_in_cube(*args):
  return _pycrysfml.FortFuncs_vpoint_in_cube(*args)
FortFuncs_vpoint_in_cube = _pycrysfml.FortFuncs_vpoint_in_cube

def FortFuncs_vpoint_in_line(*args):
  return _pycrysfml.FortFuncs_vpoint_in_line(*args)
FortFuncs_vpoint_in_line = _pycrysfml.FortFuncs_vpoint_in_line

def FortFuncs_vpoint_in_square(*args):
  return _pycrysfml.FortFuncs_vpoint_in_square(*args)
FortFuncs_vpoint_in_square = _pycrysfml.FortFuncs_vpoint_in_square

def FortFuncs_init_err_maps():
  return _pycrysfml.FortFuncs_init_err_maps()
FortFuncs_init_err_maps = _pycrysfml.FortFuncs_init_err_maps

def FortFuncs_set_cube_info():
  return _pycrysfml.FortFuncs_set_cube_info()
FortFuncs_set_cube_info = _pycrysfml.FortFuncs_set_cube_info

def FortFuncs_init_err_molec():
  return _pycrysfml.FortFuncs_init_err_molec()
FortFuncs_init_err_molec = _pycrysfml.FortFuncs_init_err_molec

def FortFuncs_set_euler_matrix(*args):
  return _pycrysfml.FortFuncs_set_euler_matrix(*args)
FortFuncs_set_euler_matrix = _pycrysfml.FortFuncs_set_euler_matrix

def FortFuncs_angs_4c_bisecting(*args):
  return _pycrysfml.FortFuncs_angs_4c_bisecting(*args)
FortFuncs_angs_4c_bisecting = _pycrysfml.FortFuncs_angs_4c_bisecting

def FortFuncs_calang(*args):
  return _pycrysfml.FortFuncs_calang(*args)
FortFuncs_calang = _pycrysfml.FortFuncs_calang

def FortFuncs_calc_om_chi_phi(*args):
  return _pycrysfml.FortFuncs_calc_om_chi_phi(*args)
FortFuncs_calc_om_chi_phi = _pycrysfml.FortFuncs_calc_om_chi_phi

def FortFuncs_calc_psi(*args):
  return _pycrysfml.FortFuncs_calc_psi(*args)
FortFuncs_calc_psi = _pycrysfml.FortFuncs_calc_psi

def FortFuncs_cell_fr_ub(*args):
  return _pycrysfml.FortFuncs_cell_fr_ub(*args)
FortFuncs_cell_fr_ub = _pycrysfml.FortFuncs_cell_fr_ub

def FortFuncs_chi_mat(*args):
  return _pycrysfml.FortFuncs_chi_mat(*args)
FortFuncs_chi_mat = _pycrysfml.FortFuncs_chi_mat

def FortFuncs_psd_convert(*args):
  return _pycrysfml.FortFuncs_psd_convert(*args)
FortFuncs_psd_convert = _pycrysfml.FortFuncs_psd_convert

def FortFuncs_d19psd(*args):
  return _pycrysfml.FortFuncs_d19psd(*args)
FortFuncs_d19psd = _pycrysfml.FortFuncs_d19psd

def FortFuncs_dspace(*args):
  return _pycrysfml.FortFuncs_dspace(*args)
FortFuncs_dspace = _pycrysfml.FortFuncs_dspace

def FortFuncs_equatorial_chi_phi(*args):
  return _pycrysfml.FortFuncs_equatorial_chi_phi(*args)
FortFuncs_equatorial_chi_phi = _pycrysfml.FortFuncs_equatorial_chi_phi

def FortFuncs_fixdnu(*args):
  return _pycrysfml.FortFuncs_fixdnu(*args)
FortFuncs_fixdnu = _pycrysfml.FortFuncs_fixdnu

def FortFuncs_flat_cone_vertdet(*args):
  return _pycrysfml.FortFuncs_flat_cone_vertdet(*args)
FortFuncs_flat_cone_vertdet = _pycrysfml.FortFuncs_flat_cone_vertdet

def FortFuncs_genub(*args):
  return _pycrysfml.FortFuncs_genub(*args)
FortFuncs_genub = _pycrysfml.FortFuncs_genub

def FortFuncs_get_angs_nb(*args):
  return _pycrysfml.FortFuncs_get_angs_nb(*args)
FortFuncs_get_angs_nb = _pycrysfml.FortFuncs_get_angs_nb

def FortFuncs_get_dspacing_theta(*args):
  return _pycrysfml.FortFuncs_get_dspacing_theta(*args)
FortFuncs_get_dspacing_theta = _pycrysfml.FortFuncs_get_dspacing_theta

def FortFuncs_get_gaomnu_frchiphi(*args):
  return _pycrysfml.FortFuncs_get_gaomnu_frchiphi(*args)
FortFuncs_get_gaomnu_frchiphi = _pycrysfml.FortFuncs_get_gaomnu_frchiphi

def FortFuncs_get_ub_from_hkl_hkl_omega(*args):
  return _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega(*args)
FortFuncs_get_ub_from_hkl_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_hkl_hkl_omega

def FortFuncs_get_ub_from_uvw_hkl_omega(*args):
  return _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega(*args)
FortFuncs_get_ub_from_uvw_hkl_omega = _pycrysfml.FortFuncs_get_ub_from_uvw_hkl_omega

def FortFuncs_get_waveganu_frz4(*args):
  return _pycrysfml.FortFuncs_get_waveganu_frz4(*args)
FortFuncs_get_waveganu_frz4 = _pycrysfml.FortFuncs_get_waveganu_frz4

def FortFuncs_get_z1_d9angls(*args):
  return _pycrysfml.FortFuncs_get_z1_d9angls(*args)
FortFuncs_get_z1_d9angls = _pycrysfml.FortFuncs_get_z1_d9angls

def FortFuncs_get_z1_from_pixel(*args):
  return _pycrysfml.FortFuncs_get_z1_from_pixel(*args)
FortFuncs_get_z1_from_pixel = _pycrysfml.FortFuncs_get_z1_from_pixel

def FortFuncs_normal(*args):
  return _pycrysfml.FortFuncs_normal(*args)
FortFuncs_normal = _pycrysfml.FortFuncs_normal

def FortFuncs_phi_mat(*args):
  return _pycrysfml.FortFuncs_phi_mat(*args)
FortFuncs_phi_mat = _pycrysfml.FortFuncs_phi_mat

def FortFuncs_psi_mat(*args):
  return _pycrysfml.FortFuncs_psi_mat(*args)
FortFuncs_psi_mat = _pycrysfml.FortFuncs_psi_mat

def FortFuncs_refvec(*args):
  return _pycrysfml.FortFuncs_refvec(*args)
FortFuncs_refvec = _pycrysfml.FortFuncs_refvec

def FortFuncs_s4cnb(*args):
  return _pycrysfml.FortFuncs_s4cnb(*args)
FortFuncs_s4cnb = _pycrysfml.FortFuncs_s4cnb

def FortFuncs_set_psd(dist=None, cg=None, ag=None, nh=None, nv=None, ip=None):
  return _pycrysfml.FortFuncs_set_psd(dist, cg, ag, nh, nv, ip)
FortFuncs_set_psd = _pycrysfml.FortFuncs_set_psd

def FortFuncs_snb4c(*args):
  return _pycrysfml.FortFuncs_snb4c(*args)
FortFuncs_snb4c = _pycrysfml.FortFuncs_snb4c

def FortFuncs_sxdpsd(*args):
  return _pycrysfml.FortFuncs_sxdpsd(*args)
FortFuncs_sxdpsd = _pycrysfml.FortFuncs_sxdpsd

def FortFuncs_triple(*args):
  return _pycrysfml.FortFuncs_triple(*args)
FortFuncs_triple = _pycrysfml.FortFuncs_triple

def FortFuncs_z1frfc(*args):
  return _pycrysfml.FortFuncs_z1frfc(*args)
FortFuncs_z1frfc = _pycrysfml.FortFuncs_z1frfc

def FortFuncs_z1frmd(*args):
  return _pycrysfml.FortFuncs_z1frmd(*args)
FortFuncs_z1frmd = _pycrysfml.FortFuncs_z1frmd

def FortFuncs_z1frnb(*args):
  return _pycrysfml.FortFuncs_z1frnb(*args)
FortFuncs_z1frnb = _pycrysfml.FortFuncs_z1frnb

def FortFuncs_z1frz2(*args):
  return _pycrysfml.FortFuncs_z1frz2(*args)
FortFuncs_z1frz2 = _pycrysfml.FortFuncs_z1frz2

def FortFuncs_z1frz3(*args):
  return _pycrysfml.FortFuncs_z1frz3(*args)
FortFuncs_z1frz3 = _pycrysfml.FortFuncs_z1frz3

def FortFuncs_z1frz4(*args):
  return _pycrysfml.FortFuncs_z1frz4(*args)
FortFuncs_z1frz4 = _pycrysfml.FortFuncs_z1frz4

def FortFuncs_z2frz1(*args):
  return _pycrysfml.FortFuncs_z2frz1(*args)
FortFuncs_z2frz1 = _pycrysfml.FortFuncs_z2frz1

def FortFuncs_z3frz1(*args):
  return _pycrysfml.FortFuncs_z3frz1(*args)
FortFuncs_z3frz1 = _pycrysfml.FortFuncs_z3frz1

def FortFuncs_z4frgn(*args):
  return _pycrysfml.FortFuncs_z4frgn(*args)
FortFuncs_z4frgn = _pycrysfml.FortFuncs_z4frgn

def FortFuncs_z4frz1(*args):
  return _pycrysfml.FortFuncs_z4frz1(*args)
FortFuncs_z4frz1 = _pycrysfml.FortFuncs_z4frz1

def FortFuncs_allocate_atoms_conf_list(*args):
  return _pycrysfml.FortFuncs_allocate_atoms_conf_list(*args)
FortFuncs_allocate_atoms_conf_list = _pycrysfml.FortFuncs_allocate_atoms_conf_list

def FortFuncs_deallocate_bvs_table():
  return _pycrysfml.FortFuncs_deallocate_bvs_table()
FortFuncs_deallocate_bvs_table = _pycrysfml.FortFuncs_deallocate_bvs_table

def FortFuncs_init_err_conf():
  return _pycrysfml.FortFuncs_init_err_conf()
FortFuncs_init_err_conf = _pycrysfml.FortFuncs_init_err_conf

def FortFuncs_set_bvs_table():
  return _pycrysfml.FortFuncs_set_bvs_table()
FortFuncs_set_bvs_table = _pycrysfml.FortFuncs_set_bvs_table

def FortFuncs_file_to_filelist(*args):
  return _pycrysfml.FortFuncs_file_to_filelist(*args)
FortFuncs_file_to_filelist = _pycrysfml.FortFuncs_file_to_filelist

def FortFuncs_init_err_form():
  return _pycrysfml.FortFuncs_init_err_form()
FortFuncs_init_err_form = _pycrysfml.FortFuncs_init_err_form

def FortFuncs_read_uvals(*args):
  return _pycrysfml.FortFuncs_read_uvals(*args)
FortFuncs_read_uvals = _pycrysfml.FortFuncs_read_uvals

def FortFuncs_write_cif_powder_profile(*args):
  return _pycrysfml.FortFuncs_write_cif_powder_profile(*args)
FortFuncs_write_cif_powder_profile = _pycrysfml.FortFuncs_write_cif_powder_profile

def FortFuncs_write_cif_template(*args):
  return _pycrysfml.FortFuncs_write_cif_template(*args)
FortFuncs_write_cif_template = _pycrysfml.FortFuncs_write_cif_template

def FortFuncs_write_shx_template(*args):
  return _pycrysfml.FortFuncs_write_shx_template(*args)
FortFuncs_write_shx_template = _pycrysfml.FortFuncs_write_shx_template

def FortFuncs_set_shubnikov_group(*args):
  return _pycrysfml.FortFuncs_set_shubnikov_group(*args)
FortFuncs_set_shubnikov_group = _pycrysfml.FortFuncs_set_shubnikov_group

def FortFuncs_write_magnetic_structure(*args):
  return _pycrysfml.FortFuncs_write_magnetic_structure(*args)
FortFuncs_write_magnetic_structure = _pycrysfml.FortFuncs_write_magnetic_structure

def FortFuncs_write_mcif(*args):
  return _pycrysfml.FortFuncs_write_mcif(*args)
FortFuncs_write_mcif = _pycrysfml.FortFuncs_write_mcif

def FortFuncs_init_err_msfac():
  return _pycrysfml.FortFuncs_init_err_msfac()
FortFuncs_init_err_msfac = _pycrysfml.FortFuncs_init_err_msfac

def FortFuncs_write_mag_structure_factors(*args):
  return _pycrysfml.FortFuncs_write_mag_structure_factors(*args)
FortFuncs_write_mag_structure_factors = _pycrysfml.FortFuncs_write_mag_structure_factors

def FortFuncs_allocate_vparam(*args):
  return _pycrysfml.FortFuncs_allocate_vparam(*args)
FortFuncs_allocate_vparam = _pycrysfml.FortFuncs_allocate_vparam

def FortFuncs_get_restang_line(*args):
  return _pycrysfml.FortFuncs_get_restang_line(*args)
FortFuncs_get_restang_line = _pycrysfml.FortFuncs_get_restang_line

def FortFuncs_get_restdis_line(*args):
  return _pycrysfml.FortFuncs_get_restdis_line(*args)
FortFuncs_get_restdis_line = _pycrysfml.FortFuncs_get_restdis_line

def FortFuncs_get_resttor_line(*args):
  return _pycrysfml.FortFuncs_get_resttor_line(*args)
FortFuncs_get_resttor_line = _pycrysfml.FortFuncs_get_resttor_line

def FortFuncs_init_err_refcodes():
  return _pycrysfml.FortFuncs_init_err_refcodes()
FortFuncs_init_err_refcodes = _pycrysfml.FortFuncs_init_err_refcodes

def FortFuncs_write_info_refparams(iunit=None):
  return _pycrysfml.FortFuncs_write_info_refparams(iunit)
FortFuncs_write_info_refparams = _pycrysfml.FortFuncs_write_info_refparams

class generic_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generic_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generic_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_generic_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_generic_numor_type
    __del__ = lambda self : None;
    def write_generic_numor(self, lun=None): return _pycrysfml.generic_numor_type_write_generic_numor(self, lun)
    __swig_setmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.generic_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.generic_numor_type_data_ptr_get, _pycrysfml.generic_numor_type_data_ptr_set)
generic_numor_type_swigregister = _pycrysfml.generic_numor_type_swigregister
generic_numor_type_swigregister(generic_numor_type)

class group_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, group_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, group_k_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_group_k_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_group_k_type
    __del__ = lambda self : None;
    def write_group_k(self, lun=None): return _pycrysfml.group_k_type_write_group_k(self, lun)
    __swig_setmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.group_k_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.group_k_type_data_ptr_get, _pycrysfml.group_k_type_data_ptr_set)
group_k_type_swigregister = _pycrysfml.group_k_type_swigregister
group_k_type_swigregister(group_k_type)

class ill_data_record_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ill_data_record_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ill_data_record_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ill_data_record_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ill_data_record_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ill_data_record_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ill_data_record_type_data_ptr_get, _pycrysfml.ill_data_record_type_data_ptr_set)
ill_data_record_type_swigregister = _pycrysfml.ill_data_record_type_swigregister
ill_data_record_type_swigregister(ill_data_record_type)

class interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, interval_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_interval_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_interval_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.interval_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.interval_type_data_ptr_get, _pycrysfml.interval_type_data_ptr_set)
interval_type_swigregister = _pycrysfml.interval_type_swigregister
interval_type_swigregister(interval_type)

class job_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, job_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, job_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_job_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_job_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.job_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.job_info_type_data_ptr_get, _pycrysfml.job_info_type_data_ptr_set)
job_info_type_swigregister = _pycrysfml.job_info_type_swigregister
job_info_type_swigregister(job_info_type)

class lsq_conditions_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsq_conditions_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsq_conditions_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_lsq_conditions_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_lsq_conditions_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.lsq_conditions_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.lsq_conditions_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.lsq_conditions_type_data_ptr_get, _pycrysfml.lsq_conditions_type_data_ptr_set)
lsq_conditions_type_swigregister = _pycrysfml.lsq_conditions_type_swigregister
lsq_conditions_type_swigregister(lsq_conditions_type)

class lsq_data_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsq_data_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsq_data_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_lsq_data_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_lsq_data_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.lsq_data_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.lsq_data_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.lsq_data_type_data_ptr_get, _pycrysfml.lsq_data_type_data_ptr_set)
lsq_data_type_swigregister = _pycrysfml.lsq_data_type_swigregister
lsq_data_type_swigregister(lsq_data_type)

class lsq_state_vector_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lsq_state_vector_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lsq_state_vector_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_lsq_state_vector_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_lsq_state_vector_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.lsq_state_vector_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.lsq_state_vector_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.lsq_state_vector_type_data_ptr_get, _pycrysfml.lsq_state_vector_type_data_ptr_set)
lsq_state_vector_type_swigregister = _pycrysfml.lsq_state_vector_type_swigregister
lsq_state_vector_type_swigregister(lsq_state_vector_type)

class maghd_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_maghd_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.maghd_list_type_data_ptr_get, _pycrysfml.maghd_list_type_data_ptr_set)
maghd_list_type_swigregister = _pycrysfml.maghd_list_type_swigregister
maghd_list_type_swigregister(maghd_list_type)

class maghd_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, maghd_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, maghd_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_maghd_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_maghd_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.maghd_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.maghd_type_data_ptr_get, _pycrysfml.maghd_type_data_ptr_set)
maghd_type_swigregister = _pycrysfml.maghd_type_swigregister
maghd_type_swigregister(maghd_type)

class magh_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magh_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_list_type
    __del__ = lambda self : None;
    def calc_mag_interaction_vector(self, *args): return _pycrysfml.magh_list_type_calc_mag_interaction_vector(self, *args)
    def init_mag_structure_factors(self, *args): return _pycrysfml.magh_list_type_init_mag_structure_factors(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magh_list_type_data_ptr_get, _pycrysfml.magh_list_type_data_ptr_set)
magh_list_type_swigregister = _pycrysfml.magh_list_type_swigregister
magh_list_type_swigregister(magh_list_type)

class magh_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magh_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magh_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magh_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magh_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magh_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magh_type_data_ptr_get, _pycrysfml.magh_type_data_ptr_set)
magh_type_swigregister = _pycrysfml.magh_type_swigregister
magh_type_swigregister(magh_type)

class magnetic_domain_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_domain_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_domain_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_domain_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_domain_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_domain_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_domain_type_data_ptr_get, _pycrysfml.magnetic_domain_type_data_ptr_set)
magnetic_domain_type_swigregister = _pycrysfml.magnetic_domain_type_swigregister
magnetic_domain_type_swigregister(magnetic_domain_type)

class magnetic_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_form_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_form_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_form_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_form_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_form_type_data_ptr_get, _pycrysfml.magnetic_form_type_data_ptr_set)
magnetic_form_type_swigregister = _pycrysfml.magnetic_form_type_swigregister
magnetic_form_type_swigregister(magnetic_form_type)

class magnetic_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_group_type
    __del__ = lambda self : None;
    def write_shubnikov_group(self, iunit=None): return _pycrysfml.magnetic_group_type_write_shubnikov_group(self, iunit)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_group_type_data_ptr_get, _pycrysfml.magnetic_group_type_data_ptr_set)
magnetic_group_type_swigregister = _pycrysfml.magnetic_group_type_swigregister
magnetic_group_type_swigregister(magnetic_group_type)

class magnetic_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magnetic_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magnetic_space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magnetic_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magnetic_space_group_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magnetic_space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magnetic_space_group_type_data_ptr_get, _pycrysfml.magnetic_space_group_type_data_ptr_set)
magnetic_space_group_type_swigregister = _pycrysfml.magnetic_space_group_type_swigregister
magnetic_space_group_type_swigregister(magnetic_space_group_type)

class magsymm_k_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, magsymm_k_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, magsymm_k_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_magsymm_k_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_magsymm_k_type
    __del__ = lambda self : None;
    def init_magsymm_k_type(self): return _pycrysfml.magsymm_k_type_init_magsymm_k_type(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.magsymm_k_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.magsymm_k_type_data_ptr_get, _pycrysfml.magsymm_k_type_data_ptr_set)
magsymm_k_type_swigregister = _pycrysfml.magsymm_k_type_swigregister
magsymm_k_type_swigregister(magsymm_k_type)

class matom_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_matom_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_list_type
    __del__ = lambda self : None;
    def deallocate_matom_list(self): return _pycrysfml.matom_list_type_deallocate_matom_list(self)
    def mag_structure_factors(self, *args): return _pycrysfml.matom_list_type_mag_structure_factors(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.matom_list_type_data_ptr_get, _pycrysfml.matom_list_type_data_ptr_set)
matom_list_type_swigregister = _pycrysfml.matom_list_type_swigregister
matom_list_type_swigregister(matom_list_type)

class matom_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, matom_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, matom_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_matom_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_matom_type
    __del__ = lambda self : None;
    def init_matom_type(self): return _pycrysfml.matom_type_init_matom_type(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.matom_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.matom_type_data_ptr_get, _pycrysfml.matom_type_data_ptr_set)
matom_type_swigregister = _pycrysfml.matom_type_swigregister
matom_type_swigregister(matom_type)

class molecular_crystal_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecular_crystal_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecular_crystal_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_molecular_crystal_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecular_crystal_type
    __del__ = lambda self : None;
    def molcrys_to_atomlist(self, *args): return _pycrysfml.molecular_crystal_type_molcrys_to_atomlist(self, *args)
    def write_molecular_crystal(self, lun=None): return _pycrysfml.molecular_crystal_type_write_molecular_crystal(self, lun)
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecular_crystal_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.molecular_crystal_type_data_ptr_get, _pycrysfml.molecular_crystal_type_data_ptr_set)
molecular_crystal_type_swigregister = _pycrysfml.molecular_crystal_type_swigregister
molecular_crystal_type_swigregister(molecular_crystal_type)

class molecule_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, molecule_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, molecule_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_molecule_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_molecule_type
    __del__ = lambda self : None;
    def cartesian_to_fractional(self, *args): return _pycrysfml.molecule_type_cartesian_to_fractional(self, *args)
    def cartesian_to_spherical(self, newmolecule=None): return _pycrysfml.molecule_type_cartesian_to_spherical(self, newmolecule)
    def cartesian_to_zmatrix(self, newmolecule=None, cell=None, d_min=None, d_max=None): return _pycrysfml.molecule_type_cartesian_to_zmatrix(self, newmolecule, cell, d_min, d_max)
    def fix_reference(self, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None): return _pycrysfml.molecule_type_fix_reference(self, newmolecule, natom_o, natom_x, natom_xy)
    def fix_orient_cartesian(self, newmolecule=None, natom_o=None, natom_x=None, natom_xy=None, mat=None): return _pycrysfml.molecule_type_fix_orient_cartesian(self, newmolecule, natom_o, natom_x, natom_xy, mat)
    def fractional_to_cartesian(self, *args): return _pycrysfml.molecule_type_fractional_to_cartesian(self, *args)
    def fractional_to_spherical(self, *args): return _pycrysfml.molecule_type_fractional_to_spherical(self, *args)
    def fractional_to_zmatrix(self, *args): return _pycrysfml.molecule_type_fractional_to_zmatrix(self, *args)
    def init_molecule(self, natm=None): return _pycrysfml.molecule_type_init_molecule(self, natm)
    def molec_to_atomlist(self, *args): return _pycrysfml.molecule_type_molec_to_atomlist(self, *args)
    def spherical_to_cartesian(self, newmolecule=None): return _pycrysfml.molecule_type_spherical_to_cartesian(self, newmolecule)
    def spherical_to_fractional(self, *args): return _pycrysfml.molecule_type_spherical_to_fractional(self, *args)
    def spherical_to_zmatrix(self, newmolecule=None, cell=None): return _pycrysfml.molecule_type_spherical_to_zmatrix(self, newmolecule, cell)
    def write_molecule(self, lun=None): return _pycrysfml.molecule_type_write_molecule(self, lun)
    def zmatrix_to_cartesian(self, newmolecule=None): return _pycrysfml.molecule_type_zmatrix_to_cartesian(self, newmolecule)
    def zmatrix_to_fractional(self, *args): return _pycrysfml.molecule_type_zmatrix_to_fractional(self, *args)
    def zmatrix_to_spherical(self, newmolecule=None): return _pycrysfml.molecule_type_zmatrix_to_spherical(self, newmolecule)
    __swig_setmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.molecule_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.molecule_type_data_ptr_get, _pycrysfml.molecule_type_data_ptr_set)
molecule_type_swigregister = _pycrysfml.molecule_type_swigregister
molecule_type_swigregister(molecule_type)

class msym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_msym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_msym_oper_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.msym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.msym_oper_type_data_ptr_get, _pycrysfml.msym_oper_type_data_ptr_set)
msym_oper_type_swigregister = _pycrysfml.msym_oper_type_swigregister
msym_oper_type_swigregister(msym_oper_type)

class nonatomic_parameter_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_nonatomic_parameter_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_list_type
    __del__ = lambda self : None;
    def vstate_to_modelpar(self, mode=None): return _pycrysfml.nonatomic_parameter_list_type_vstate_to_modelpar(self, mode)
    def write_info_refgcodes(self, iunit=None): return _pycrysfml.nonatomic_parameter_list_type_write_info_refgcodes(self, iunit)
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_list_type_data_ptr_get, _pycrysfml.nonatomic_parameter_list_type_data_ptr_set)
nonatomic_parameter_list_type_swigregister = _pycrysfml.nonatomic_parameter_list_type_swigregister
nonatomic_parameter_list_type_swigregister(nonatomic_parameter_list_type)

class nonatomic_parameter_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nonatomic_parameter_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nonatomic_parameter_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_nonatomic_parameter_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_nonatomic_parameter_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.nonatomic_parameter_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.nonatomic_parameter_type_data_ptr_get, _pycrysfml.nonatomic_parameter_type_data_ptr_set)
nonatomic_parameter_type_swigregister = _pycrysfml.nonatomic_parameter_type_swigregister
nonatomic_parameter_type_swigregister(nonatomic_parameter_type)

class ns_space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ns_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_space_group_type
    __del__ = lambda self : None;
    def copy_ns_spg_to_spg(self, *args): return _pycrysfml.ns_space_group_type_copy_ns_spg_to_spg(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ns_space_group_type_data_ptr_get, _pycrysfml.ns_space_group_type_data_ptr_set)
ns_space_group_type_swigregister = _pycrysfml.ns_space_group_type_swigregister
ns_space_group_type_swigregister(ns_space_group_type)

class ns_sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ns_sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ns_sym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_ns_sym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_ns_sym_oper_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.ns_sym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.ns_sym_oper_type_data_ptr_get, _pycrysfml.ns_sym_oper_type_data_ptr_set)
ns_sym_oper_type_swigregister = _pycrysfml.ns_sym_oper_type_swigregister
ns_sym_oper_type_swigregister(ns_sym_oper_type)

class opt_conditions_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, opt_conditions_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, opt_conditions_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_opt_conditions_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_opt_conditions_type
    __del__ = lambda self : None;
    def init_opt_conditions(self): return _pycrysfml.opt_conditions_type_init_opt_conditions(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.opt_conditions_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.opt_conditions_type_data_ptr_get, _pycrysfml.opt_conditions_type_data_ptr_set)
opt_conditions_type_swigregister = _pycrysfml.opt_conditions_type_swigregister
opt_conditions_type_swigregister(opt_conditions_type)

class point_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, point_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, point_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_point_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_point_list_type
    __del__ = lambda self : None;
    def deallocate_point_list(self): return _pycrysfml.point_list_type_deallocate_point_list(self)
    __swig_setmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.point_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.point_list_type_data_ptr_get, _pycrysfml.point_list_type_data_ptr_set)
point_list_type_swigregister = _pycrysfml.point_list_type_swigregister
point_list_type_swigregister(point_list_type)

class points_interval_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, points_interval_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, points_interval_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_points_interval_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_points_interval_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.points_interval_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.points_interval_type_data_ptr_get, _pycrysfml.points_interval_type_data_ptr_set)
points_interval_type_swigregister = _pycrysfml.points_interval_type_swigregister
points_interval_type_swigregister(points_interval_type)

class polar_calc_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_list_type_data_ptr_get, _pycrysfml.polar_calc_list_type_data_ptr_set)
polar_calc_list_type_swigregister = _pycrysfml.polar_calc_list_type_swigregister
polar_calc_list_type_swigregister(polar_calc_list_type)

class polar_calcmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calcmulti_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calcmulti_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_list_type_data_ptr_set)
polar_calcmulti_list_type_swigregister = _pycrysfml.polar_calcmulti_list_type_swigregister
polar_calcmulti_list_type_swigregister(polar_calcmulti_list_type)

class polar_calcmulti_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calcmulti_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calcmulti_svs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calcmulti_svs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calcmulti_svs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calcmulti_svs_list_type_data_ptr_get, _pycrysfml.polar_calcmulti_svs_list_type_data_ptr_set)
polar_calcmulti_svs_list_type_swigregister = _pycrysfml.polar_calcmulti_svs_list_type_swigregister
polar_calcmulti_svs_list_type_swigregister(polar_calcmulti_svs_list_type)

class polar_calc_svs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_svs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_svs_list_type_data_ptr_get, _pycrysfml.polar_calc_svs_list_type_data_ptr_set)
polar_calc_svs_list_type_swigregister = _pycrysfml.polar_calc_svs_list_type_swigregister
polar_calc_svs_list_type_swigregister(polar_calc_svs_list_type)

class polar_calc_svs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_svs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_svs_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_svs_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_svs_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_svs_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_svs_type_data_ptr_get, _pycrysfml.polar_calc_svs_type_data_ptr_set)
polar_calc_svs_type_swigregister = _pycrysfml.polar_calc_svs_type_swigregister
polar_calc_svs_type_swigregister(polar_calc_svs_type)

class polar_calc_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_calc_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_calc_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_calc_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_calc_type
    __del__ = lambda self : None;
    def write_polar_info(self, *args): return _pycrysfml.polar_calc_type_write_polar_info(self, *args)
    def write_polar_line(self, lun=None): return _pycrysfml.polar_calc_type_write_polar_line(self, lun)
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_calc_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_calc_type_data_ptr_get, _pycrysfml.polar_calc_type_data_ptr_set)
polar_calc_type_swigregister = _pycrysfml.polar_calc_type_swigregister
polar_calc_type_swigregister(polar_calc_type)

class polar_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_info_type_data_ptr_get, _pycrysfml.polar_info_type_data_ptr_set)
polar_info_type_swigregister = _pycrysfml.polar_info_type_swigregister
polar_info_type_swigregister(polar_info_type)

class polar_obs_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obs_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obs_list_type_data_ptr_get, _pycrysfml.polar_obs_list_type_data_ptr_set)
polar_obs_list_type_swigregister = _pycrysfml.polar_obs_list_type_swigregister
polar_obs_list_type_swigregister(polar_obs_list_type)

class polar_obsmulti_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obsmulti_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obsmulti_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obsmulti_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obsmulti_list_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obsmulti_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obsmulti_list_type_data_ptr_get, _pycrysfml.polar_obsmulti_list_type_data_ptr_set)
polar_obsmulti_list_type_swigregister = _pycrysfml.polar_obsmulti_list_type_swigregister
polar_obsmulti_list_type_swigregister(polar_obsmulti_list_type)

class polar_obs_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, polar_obs_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, polar_obs_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_polar_obs_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_polar_obs_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.polar_obs_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.polar_obs_type_data_ptr_get, _pycrysfml.polar_obs_type_data_ptr_set)
polar_obs_type_swigregister = _pycrysfml.polar_obs_type_swigregister
polar_obs_type_swigregister(polar_obs_type)

class powder_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, powder_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, powder_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_powder_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_powder_numor_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.powder_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.powder_numor_type_data_ptr_get, _pycrysfml.powder_numor_type_data_ptr_set)
powder_numor_type_swigregister = _pycrysfml.powder_numor_type_swigregister
powder_numor_type_swigregister(powder_numor_type)

class psd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, psd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, psd_val_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_psd_val_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_psd_val_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.psd_val_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.psd_val_type_data_ptr_get, _pycrysfml.psd_val_type_data_ptr_set)
psd_val_type_swigregister = _pycrysfml.psd_val_type_swigregister
psd_val_type_swigregister(psd_val_type)

class reflection_list_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_list_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_list_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflection_list_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_list_type
    __del__ = lambda self : None;
    def init_reflist(self, n=None): return _pycrysfml.reflection_list_type_init_reflist(self, n)
    def write_reflist_info(self, iunit=None, mode=None): return _pycrysfml.reflection_list_type_write_reflist_info(self, iunit, mode)
    def init_calc_strfactors(self, *args): return _pycrysfml.reflection_list_type_init_calc_strfactors(self, *args)
    def init_structure_factors(self, *args): return _pycrysfml.reflection_list_type_init_structure_factors(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_list_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflection_list_type_data_ptr_get, _pycrysfml.reflection_list_type_data_ptr_set)
reflection_list_type_swigregister = _pycrysfml.reflection_list_type_swigregister
reflection_list_type_swigregister(reflection_list_type)

class reflection_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflection_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflection_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflection_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflection_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflection_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflection_type_data_ptr_get, _pycrysfml.reflection_type_data_ptr_set)
reflection_type_swigregister = _pycrysfml.reflection_type_swigregister
reflection_type_swigregister(reflection_type)

class reflect_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, reflect_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, reflect_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_reflect_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_reflect_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.reflect_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.reflect_type_data_ptr_get, _pycrysfml.reflect_type_data_ptr_set)
reflect_type_swigregister = _pycrysfml.reflect_type_swigregister
reflect_type_swigregister(reflect_type)

class space_group_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, space_group_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, space_group_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_space_group_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_space_group_type
    __del__ = lambda self : None;
    def spgr_equal(self, *args): return _pycrysfml.space_group_type_spgr_equal(self, *args)
    def get_hallsymb_from_gener(self, spaceh=None): return _pycrysfml.space_group_type_get_hallsymb_from_gener(self, spaceh)
    def get_laue_pg(self, *args): return _pycrysfml.space_group_type_get_laue_pg(self, *args)
    def read_bin_spacegroup(self, *args): return _pycrysfml.space_group_type_read_bin_spacegroup(self, *args)
    def write_bin_spacegroup(self, *args): return _pycrysfml.space_group_type_write_bin_spacegroup(self, *args)
    def write_spacegroup(self, iunit=None, full=None): return _pycrysfml.space_group_type_write_spacegroup(self, iunit, full)
    def write_asu(self, iunit=None): return _pycrysfml.space_group_type_write_asu(self, iunit)
    def atlist1_extencell_atlist2(self, *args): return _pycrysfml.space_group_type_atlist1_extencell_atlist2(self, *args)
    def set_atom_equiv_list(self, *args): return _pycrysfml.space_group_type_set_atom_equiv_list(self, *args)
    def set_new_asymunit(self, *args): return _pycrysfml.space_group_type_set_new_asymunit(self, *args)
    def set_orbits_inlist(self, *args): return _pycrysfml.space_group_type_set_orbits_inlist(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.space_group_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.space_group_type_data_ptr_get, _pycrysfml.space_group_type_data_ptr_set)
space_group_type_swigregister = _pycrysfml.space_group_type_swigregister
space_group_type_swigregister(space_group_type)

class spgr_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, spgr_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, spgr_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_spgr_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_spgr_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.spgr_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.spgr_info_type_data_ptr_get, _pycrysfml.spgr_info_type_data_ptr_set)
spgr_info_type_swigregister = _pycrysfml.spgr_info_type_swigregister
spgr_info_type_swigregister(spgr_info_type)

class sxd_val_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxd_val_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxd_val_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxd_val_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxd_val_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxd_val_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxd_val_type_data_ptr_get, _pycrysfml.sxd_val_type_data_ptr_set)
sxd_val_type_swigregister = _pycrysfml.sxd_val_type_swigregister
sxd_val_type_swigregister(sxd_val_type)

class sxtal_numor_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_numor_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_numor_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxtal_numor_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_numor_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_numor_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxtal_numor_type_data_ptr_get, _pycrysfml.sxtal_numor_type_data_ptr_set)
sxtal_numor_type_swigregister = _pycrysfml.sxtal_numor_type_swigregister
sxtal_numor_type_swigregister(sxtal_numor_type)

class sxtal_orient_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sxtal_orient_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sxtal_orient_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sxtal_orient_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sxtal_orient_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sxtal_orient_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sxtal_orient_type_data_ptr_get, _pycrysfml.sxtal_orient_type_data_ptr_set)
sxtal_orient_type_swigregister = _pycrysfml.sxtal_orient_type_swigregister
sxtal_orient_type_swigregister(sxtal_orient_type)

class sym_oper_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sym_oper_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sym_oper_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_sym_oper_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_sym_oper_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.sym_oper_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.sym_oper_type_data_ptr_get, _pycrysfml.sym_oper_type_data_ptr_set)
sym_oper_type_swigregister = _pycrysfml.sym_oper_type_swigregister
sym_oper_type_swigregister(sym_oper_type)

class table_equiv_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, table_equiv_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, table_equiv_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_table_equiv_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_table_equiv_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.table_equiv_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.table_equiv_type_data_ptr_get, _pycrysfml.table_equiv_type_data_ptr_set)
table_equiv_type_swigregister = _pycrysfml.table_equiv_type_swigregister
table_equiv_type_swigregister(table_equiv_type)

class torsion_restraint_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, torsion_restraint_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, torsion_restraint_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_torsion_restraint_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_torsion_restraint_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.torsion_restraint_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.torsion_restraint_type_data_ptr_get, _pycrysfml.torsion_restraint_type_data_ptr_set)
torsion_restraint_type_swigregister = _pycrysfml.torsion_restraint_type_swigregister
torsion_restraint_type_swigregister(torsion_restraint_type)

class twofold_axes_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, twofold_axes_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, twofold_axes_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_twofold_axes_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_twofold_axes_type
    __del__ = lambda self : None;
    def get_conventional_cell(self, *args): return _pycrysfml.twofold_axes_type_get_conventional_cell(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.twofold_axes_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.twofold_axes_type_data_ptr_get, _pycrysfml.twofold_axes_type_data_ptr_set)
twofold_axes_type_swigregister = _pycrysfml.twofold_axes_type_swigregister
twofold_axes_type_swigregister(twofold_axes_type)

class wyck_info_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_info_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_info_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyck_info_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_info_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_info_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyck_info_type_data_ptr_get, _pycrysfml.wyck_info_type_data_ptr_set)
wyck_info_type_swigregister = _pycrysfml.wyck_info_type_swigregister
wyck_info_type_swigregister(wyck_info_type)

class wyckoff_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyckoff_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyckoff_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyckoff_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyckoff_type
    __del__ = lambda self : None;
    def write_wyckoff(self, *args): return _pycrysfml.wyckoff_type_write_wyckoff(self, *args)
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyckoff_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyckoff_type_data_ptr_get, _pycrysfml.wyckoff_type_data_ptr_set)
wyckoff_type_swigregister = _pycrysfml.wyckoff_type_swigregister
wyckoff_type_swigregister(wyckoff_type)

class wyck_pos_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, wyck_pos_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, wyck_pos_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_wyck_pos_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_wyck_pos_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.wyck_pos_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.wyck_pos_type_data_ptr_get, _pycrysfml.wyck_pos_type_data_ptr_set)
wyck_pos_type_swigregister = _pycrysfml.wyck_pos_type_swigregister
wyck_pos_type_swigregister(wyck_pos_type)

class xray_form_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_form_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_form_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_xray_form_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_form_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_form_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.xray_form_type_data_ptr_get, _pycrysfml.xray_form_type_data_ptr_set)
xray_form_type_swigregister = _pycrysfml.xray_form_type_swigregister
xray_form_type_swigregister(xray_form_type)

class xray_wavelength_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xray_wavelength_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xray_wavelength_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_xray_wavelength_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_xray_wavelength_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.xray_wavelength_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.xray_wavelength_type_data_ptr_get, _pycrysfml.xray_wavelength_type_data_ptr_set)
xray_wavelength_type_swigregister = _pycrysfml.xray_wavelength_type_swigregister
xray_wavelength_type_swigregister(xray_wavelength_type)

class zone_axis_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, zone_axis_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, zone_axis_type, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pycrysfml.new_zone_axis_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pycrysfml.delete_zone_axis_type
    __del__ = lambda self : None;
    __swig_setmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_set
    __swig_getmethods__["data_ptr"] = _pycrysfml.zone_axis_type_data_ptr_get
    if _newclass:data_ptr = _swig_property(_pycrysfml.zone_axis_type_data_ptr_get, _pycrysfml.zone_axis_type_data_ptr_set)
zone_axis_type_swigregister = _pycrysfml.zone_axis_type_swigregister
zone_axis_type_swigregister(zone_axis_type)

# This file is compatible with both classic and new-style classes.


